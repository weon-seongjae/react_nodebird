{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.395f18a5a77c98e6742c.hot-update.js","sources":["webpack:///./sagas/post.js"],"sourcesContent":["import {\n  all, fork, takeLatest, takeEvery, put, delay, call,\n} from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  LOAD_MAIN_POSTS_FAILURE,\n  LOAD_MAIN_POSTS_REQUEST,\n  LOAD_MAIN_POSTS_SUCCESS,\n  LOAD_HASHTAG_POSTS_SUCCESS,\n  LOAD_HASHTAG_POSTS_FAILURE,\n  LOAD_HASHTAG_POSTS_REQUEST,\n  LOAD_USER_POSTS_SUCCESS,\n  LOAD_USER_POSTS_FAILURE,\n  LOAD_USER_POSTS_REQUEST,\n  LOAD_COMMENTS_SUCCESS,\n  LOAD_COMMENTS_FAILURE,\n  LOAD_COMMENTS_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  LIKE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST, RETWEET_REQUEST, RETWEET_FAILURE, RETWEET_SUCCESS,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, { // postData에 게시글 들어있음\n    withCredentials: true,\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({ // user reducer의 데이터를 수정\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e,\n    });\n  }\n}\n\n// ===================================================================================\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts'); // 서버에 요청\n  // withCredentials : true는 붙이지 않아도 됨. 로그인하지 않는 사람도 게시글은 볼 수 있음.\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n// ===================================================================================\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}`); // 서버에 요청\n  // withCredentials : true는 붙이지 않아도 됨. 로그인하지 않는 사람도 게시글은 볼 수 있음.\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n// ==========================================================================================\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id || 0}/posts`); // 서버에 요청\n  // withCredentials : true는 붙이지 않아도 됨. 로그인하지 않는 사람도 게시글은 볼 수 있음.\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n// ==========================================================================================\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, { content: data.content }, { withCredentials: true });\n}\n\nfunction* addComment(action) { // action : request에 대한 action\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId, // action 안에 들어있는 data.postId\n        comment: result.data,\n      },\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 위의 function* addComment에 대한 action\n}\n\n// ==========================게시글 불러오기 ====================================================\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) { // action : request에 대한 action\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data,\n      },\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments); // 위의 function* addComment에 대한 action\n}\n\n// =======================================================================\n\nfunction uploadImagesAPI(formData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/post/images', formData, {\n    withCredentials: true, // 로그인한 사용자만 이미지 올릴 수 있음.\n  });\n}\n\nfunction* uploadImages(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(uploadImagesAPI);\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data, // result.data: 서버쪽에서 저정된 이미지 주소\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeEvery(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\n// =======================================================================\n\nfunction likePostAPI(postId) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true, // 로그인한 사용자만 이미지 올릴 수 있음.\n  });\n}\n\nfunction* likePost(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(likePostAPI);\n    const result = yield call(likePostAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId,\n      },\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeEvery(LIKE_POST_REQUEST, likePost);\n}\n\n// =======================================================================\n\nfunction unlikePostAPI(postId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true, // 로그인한 사용자만 이미지 올릴 수 있음.\n  });\n}\n\nfunction* unlikePost(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(unlikePostAPI);\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId,\n      },\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeEvery(UNLIKE_POST_REQUEST, unlikePost);\n}\n\n// =======================================================================\n\nfunction retweetAPI(postId) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(`/post/${postId}/retweet`, {}, { // post로 요청할 때는 data가 없더라도 빈 객체라도 넣어주어야 함.\n    withCredentials: true, // 로그인한 사용자만 이미지 올릴 수 있음.\n  });\n}\n\nfunction* retweet(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(retweetAPI);\n    const result = yield call(retweetAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: RETWEET_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e,\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\n// =======================================================================\n\nfunction removePostAPI(postId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/post/${postId}/removePost`, {}, { // post로 요청할 때는 data가 없더라도 빈 객체라도 넣어주어야 함.\n    withCredentials: true, // 로그인한 사용자만 이미지 올릴 수 있음.\n  });\n}\n\nfunction* removePost(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(removePostAPI);\n    const result = yield call(removePostAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadMainPosts),\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchLoadComments),\n    fork(watchLoadHashtagPosts),\n    fork(watchLoadUserPosts),\n    fork(watchUploadImages),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n    fork(watchRetweet),\n    fork(watchRemovePost),\n  ]);\n}\n"],"mappings":"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","sourceRoot":""}