{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.2fb2dca3435dd3b355d8.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport withReduxSaga from 'next-redux-saga'; // 서버사이드 렌더링에 필수요소\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport axios from 'axios';\r\nimport Helmet from 'react-helmet';\r\nimport { Container } from 'next/app';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\nimport Home from './index';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst NodeBird = ({ Component, store, pageProps }) => ( // hashtag의 component의 props로 넣어줌.\r\n  <Container>\r\n    <Provider store={store}>\r\n      <Helmet\r\n        title=\"NodeBird\"\r\n        htmlAttributes={{ lang: 'ko' }}\r\n        meta={[{\r\n          charset: 'UTF-8',\r\n        }, {\r\n          name: 'viewport', content: 'width=device-width, initial-scale=1.0. minimum-scale=1.0, maximum-scale=1.0, user-scalable=yes,viewport-fit=cover',\r\n        }, {\r\n          'http-equiv': 'X-UA-Compatible', content: 'IE=edge',\r\n        }, {\r\n          name: 'description', content: 'weonsj의 NodeBird SNS',\r\n        }, {\r\n          name: 'og:title', content: 'NodeBird',\r\n        }, {\r\n          name: 'og:description', content: 'weonsj의 NodeBird SNS',\r\n        }, {\r\n          property: 'og:type', content: 'website',\r\n        }]}\r\n        link={[{\r\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css',\r\n        }, {\r\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css',\r\n        }, {\r\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css',\r\n        }]}\r\n        script={[{\r\n          src: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js',\r\n        }]}\r\n      />\r\n      <AppLayout>\r\n        <Component {...pageProps} />\r\n      </AppLayout>\r\n    </Provider>\r\n  </Container>\r\n);\r\n\r\nNodeBird.propTypes = {\r\n  Component: PropTypes.elementType.isRequired,\r\n  store: PropTypes.object.isRequired,\r\n  pageProps: PropTypes.object.isRequired,\r\n};\r\n\r\n// const middleware = (store) => (next) => (action) => {\r\n//   next(action);\r\n// };\r\n//= =====middleware만드는 방법 : currying - 인자 하나를 받아 다른 함수를 리턴\r\n\r\n// ==================next에서 getInitialProps 실행. context도 같이 넣어줌. 이것에 각 Component에서 실행됨.===============\r\nNodeBird.getInitialProps = async (context) => {\r\n  const { ctx, Component } = context;\r\n  let pageProps = {};\r\n  const state = ctx.store.getState(); // user 정보 가져옴, user 정보도 서버사이드 렌더링 구현됨\r\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // 쿠키가 위치하는 곳\r\n  axios.defaults.headers.Cookie = '';\r\n  if (ctx.isServer) {\r\n    axios.defaults.headers.Cookie = cookie; // 직접 쿠키를 넣어줌.\r\n  }\r\n  if (!state.user.me) {\r\n    ctx.store.dispatch({\r\n      type: LOAD_USER_REQUEST,\r\n    });\r\n  }\r\n  if (Component.getInitialProps) {\r\n    pageProps = await Component.getInitialProps(ctx) || {}; // hashtag.js에서 리턴한 값이 pageProps에 담김. pageProps는 위의 NodeBird의 pageProps로 넘김, index.js의 Home.getInitialProps = async (context)가 됨. 게시글 먼저 가져오는 경우\r\n  }\r\n  return { pageProps }; // component의 props\r\n};\r\n// =================================================================================\r\n\r\nconst configureStore = (initialState, options) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer = process.env.NODE_ENV === 'production' // 실제 서비스\r\n    ? compose(applyMiddleware(...middlewares))\r\n    : compose(\r\n      applyMiddleware(...middlewares),\r\n      !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n    );\r\n  const store = createStore(reducer, initialState, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 서버사이드 렌더링할 때 store.sagaTask를 변수로 설정. withReduxSaga가 내부에서 필요로 함\r\n  return store;\r\n};\r\n\r\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));\r\n\r\n// 레이아웃은 _app.js에서 코딩을 한다.\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AACA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AACA;AADA;AAzBA;AAHA;AAAA;AACA;AAsCA;AACA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAeA;AACA;AAhBA;AAAA;AAiBA;AAAA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAmBA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}