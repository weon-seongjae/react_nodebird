{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.f9bc25aef6d87d4c0f44.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import {\n  all, call, fork, put, takeEvery,\n} from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  EDIT_NICKNAME_FAILURE, EDIT_NICKNAME_REQUEST,\n  EDIT_NICKNAME_SUCCESS,\n  FOLLOW_USER_FAILURE,\n  FOLLOW_USER_REQUEST,\n  FOLLOW_USER_SUCCESS,\n  LOAD_FOLLOWERS_REQUEST,\n  LOAD_FOLLOWERS_SUCCESS,\n  LOAD_FOLLOWINGS_FAILURE,\n  LOAD_FOLLOWINGS_REQUEST,\n  LOAD_FOLLOWINGS_SUCCESS,\n  LOAD_USER_FAILURE,\n  LOAD_USER_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS, REMOVE_FOLLOWER_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  UNFOLLOW_USER_FAILURE,\n  UNFOLLOW_USER_REQUEST,\n  UNFOLLOW_USER_SUCCESS,\n  LOAD_FOLLOWERS_FAILURE,\n} from '../reducers/user';\nimport { UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\n\n\n// call은 동기 호출(순서를 지켜서 실행하는 경우), fork는 비동기 호출\n// call은 서버에 요청한 후 응답이 다 받아질 때까지 기다림\n// fork는 서버에 요청한 후 응답유무에 관계없이 실행\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', loginData, {\n    withCredentials: true, // 프론트와 서버간에 쿠키를 주고받을 수 있음\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    // yield fork(logger); //logger는 내 기록을 로깅하는 함수, 10초 걸림\n    // yield call(loginAPI);\n    yield put({ // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield fork(logger); //logger는 내 기록을 로깅하는 함수, 10초 걸림\n    yield call(signUpAPI, action.data);\n    yield put({ // put은 dispatch와 동일\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() { // 로그아웃 할 때는 데이터가 필요없다.\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, { // (주소, 데이터 , 설정) 두번째 인자는 데이터인데 빈 값이라도 넣어야 한다.\n    withCredentials: true, // 서버의 app.use(cors)에서 쿠키를 받는다.\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({ // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId = 0) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', { // get은 데이터가 없기 때문에 두번째가 바로 설정이 된다.\n    withCredentials: true, // 서버의 app.use(cors)에서 쿠키를 받는다.\n  });\n}\n\nfunction* loadUser(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data, // action.data = userId(남의 정보)가 없는 경우 내 정보 불러옴\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\n// =====================================================\nfunction followAPI(userId = 0) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(`/user/${userId}/follow`, {}, { // get은 데이터가 없기 때문에 두번째가 바로 설정이 된다.\n    withCredentials: true, // 서버의 app.use(cors)에서 쿠키를 받는다.\n  });\n}\n\nfunction* follow(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(followAPI);\n    const result = yield call(followAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: FOLLOW_USER_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\n// =====================================================\nfunction unfollowAPI(userId = 0) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follow`, { // get은 데이터가 없기 때문에 두번째가 바로 설정이 된다.\n    withCredentials: true, // 서버의 app.use(cors)에서 쿠키를 받는다.\n  });\n}\n\nfunction* unfollow(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(unfollowAPI);\n    const result = yield call(unfollowAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: UNFOLLOW_USER_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\n// =====================================================\nfunction loadFollowersAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId || 0}/followers`, { // get은 데이터가 없기 때문에 두번째가 바로 설정이 된다.\n    withCredentials: true, // 서버의 app.use(cors)에서 쿠키를 받는다.\n  });\n}\n\nfunction* loadFollowers(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowersAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\n// =====================================================\nfunction loadFollowingsAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId || 0}/followings`, { // get은 데이터가 없기 때문에 두번째가 바로 설정이 된다.\n    withCredentials: true, // 서버의 app.use(cors)에서 쿠키를 받는다.\n  });\n}\n\nfunction* loadFollowings(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowingsAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLoadFollowings() {\n  yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\n// =====================================================\nfunction removeFollowerAPI(userId = 0) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follower`, { // get은 데이터가 없기 때문에 두번째가 바로 설정이 된다.\n    withCredentials: true, // 서버의 app.use(cors)에서 쿠키를 받는다.\n  });\n}\n\nfunction* removeFollower(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(removeFollowersAPI);\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchRemoveFollower() {\n  yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\n// =====================================================\nfunction editNicknameAPI(nickname) {\n  // 서버에 요청을 보내는 부분\n  return axios.patch('/user/nickname', { nickname }, { // 부분수정은 patch를 사용한다. 전체 수정은 put\n    withCredentials: true, // 서버의 app.use(cors)에서 쿠키를 받는다.\n  });\n}\n\nfunction* editNickname(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(editNicknamesAPI);\n    const result = yield call(editNicknameAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: EDIT_NICKNAME_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: EDIT_NICKNAME_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchEditNickname() {\n  yield takeEvery(EDIT_NICKNAME_REQUEST, editNickname);\n}\n\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchLoadUser),\n    fork(watchSignUp),\n    fork(watchFollow),\n    fork(watchUnfollow),\n    fork(watchLoadFollowers),\n    fork(watchLoadFollowings),\n    fork(watchRemoveFollower),\n    fork(watchEditNickname),\n  ]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AA8CA;;;AAiBA;;;AASA;;;AAgBA;;;AAWA;;;AAgBA;;;AAWA;;;AAkBA;;;AAYA;;;AAiBA;;;AAYA;;;AAiBA;;;AAYA;;;AAiBA;;;AAYA;;;AAiBA;;;AAYA;;;AAiBA;;;AAYA;;;AAiBA;;;AAKA;AACA;AApUA;AAGA;AACA;AA4BA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAKA;AAAA;AACA;AACA;AAFA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AACA;AAVA;AAWA;AACA;AADA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAIA;AAAA;AACA;AADA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AASA;AACA;AACA;AAFA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAIA;AAAA;AACA;AADA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AASA;AACA;AACA;AAFA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAGA;AAHA;AAIA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AACA;AAVA;AAWA;AACA;AACA;AAFA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAGA;AAHA;AAIA;AAAA;AACA;AACA;AAFA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AATA;AAUA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAGA;AAHA;AAIA;AAAA;AACA;AACA;AAFA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AATA;AAUA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAGA;AAHA;AAIA;AAAA;AACA;AACA;AAFA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AATA;AAUA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAGA;AAHA;AAIA;AAAA;AACA;AACA;AAFA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AATA;AAUA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAGA;AAHA;AAIA;AAAA;AACA;AACA;AAFA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AATA;AAUA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAGA;AAHA;AAIA;AAAA;AACA;AACA;AAFA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AATA;AAUA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}