{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.5613fe40b46cf51d1a10.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga'; // 서버사이드 렌더링에 필수요소\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport axios from 'axios';\nimport Helmet from 'react-helmet';\nimport { Container } from 'next/app';\n\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport Home from './index';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nconst NodeBird = ({ Component, store, pageProps }) => ( // hashtag의 component의 props로 넣어줌.\n  <Container>\n    <Provider store={store}>\n      <Helmet\n        title=\"NodeBird\"\n        htmlAttributes={{ lang: 'ko' }}\n        meta={[{\n          charset: 'UTF-8',\n        }, {\n          name: 'viewport', content: 'width=device-width, initial-scale=1.0. minimum-scale=1.0, maximum-scale=1.0, user-scalable=yes,viewport-fit=cover',\n        }, {\n          'http-equiv': 'X-UA-Compatible', content: 'IE=edge',\n        }, {\n          name: 'description', content: 'weonsj의 NodeBird SNS',\n        }, {\n          name: 'og:title', content: 'NodeBird',\n        }, {\n          name: 'og:description', content: 'weonsj의 NodeBird SNS',\n        }, {\n          property: 'og:type', content: 'website',\n        }]}\n        link={[{\n          \n        }, {\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css',\n        }, {\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css',\n        }, {\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css',\n        }]}\n        script={[{\n          src: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js',\n        }]}\n      />\n      <AppLayout>\n        <Component {...pageProps} />\n      </AppLayout>\n    </Provider>\n  </Container>\n);\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired,\n};\n\n// const middleware = (store) => (next) => (action) => {\n//   next(action);\n// };\n//= =====middleware만드는 방법 : currying - 인자 하나를 받아 다른 함수를 리턴\n\n// ==================next에서 getInitialProps 실행. context도 같이 넣어줌. 이것에 각 Component에서 실행됨.===============\nNodeBird.getInitialProps = async (context) => {\n  console.log(context);\n  const { ctx, Component } = context;\n  let pageProps = {};\n  const state = ctx.store.getState(); // user 정보 가져옴, user 정보도 서버사이드 렌더링 구현됨\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // 쿠키가 위치하는 곳\n  console.log(cookie); // 클라이언트 환경에서는 브라우저가 쿠키를 넣어주는데, 서버일 경우에는 직접 넣어야 한다.\n  axios.defaults.headers.Cookie = '';\n  if (ctx.isServer) {\n    axios.defaults.headers.Cookie = cookie; // 직접 쿠키를 넣어줌.\n  }\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST,\n    });\n  }\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx); // hashtag.js에서 리턴한 값이 pageProps에 담김. pageProps는 위의 NodeBird의 pageProps로 넘김, index.js의 Home.getInitialProps = async (context)가 됨. 게시글 먼저 가져오는 경우\n  }\n  return { pageProps }; // component의 props\n};\n// =================================================================================\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, (store) => (next) => (action) => {\n    console.log(action);\n    next(action);\n  }];\n  const enhancer = process.env.NODE_ENV === 'production' // 실제 서비스\n    ? compose(applyMiddleware(...middlewares))\n    : compose(\n      applyMiddleware(...middlewares),\n      !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    );\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 서버사이드 렌더링할 때 store.sagaTask를 변수로 설정. withReduxSaga가 내부에서 필요로 함\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));\n\n// 레이아웃은 _app.js에서 코딩을 한다.\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AACA;AADA;AA3BA;AAHA;AAAA;AACA;AAwCA;AACA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAhBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAiBA;AACA;AAlBA;AAAA;AAmBA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAqBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAIA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}