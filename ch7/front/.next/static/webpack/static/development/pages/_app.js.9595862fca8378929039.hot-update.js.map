{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.9595862fca8378929039.hot-update.js","sources":["webpack:///./reducers/post.js"],"sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [], // 화면에 보일 포스트들\r\n  imagePaths: [], // 미리보기 이미지 경로\r\n  addPostErrorReason: '', // 포스트 업로드 실패 사유\r\n  isAddingPost: false, // 포스트 업로드 중\r\n  postAdded: false, // 포스트 업로드 성공\r\n  isAddingComment: false,\r\n  addCommentErrorReason: '',\r\n  commentAdded: false,\r\n  singlePost: null,\r\n};\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport default (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case UPLOAD_IMAGES_REQUEST: {\r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_SUCCESS: {\r\n        action.data.forEach((p) => {\r\n          draft.imagePaths.push(p);\r\n        });\r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_FAILURE: {\r\n        break;\r\n      }\r\n      case REMOVE_IMAGE: {\r\n        const index = draft.imagePaths.findIndex((v, i) => i === action.index);\r\n        draft.imagePaths.splice(index, 1);\r\n        break;\r\n      }\r\n      case ADD_POST_REQUEST: {\r\n        draft.isAddingPost = true;\r\n        draft.addingPostErrorReason = '';\r\n        draft.postAdded = false;\r\n        break;\r\n      }\r\n      case ADD_POST_SUCCESS: {\r\n        draft.isAddingPost = false;\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.postAdded = true;\r\n        draft.imagePaths = [];\r\n        break;\r\n      }\r\n      case ADD_POST_FAILURE: {\r\n        draft.isAddingPost = false;\r\n        draft.addPostErrorReason = action.error;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_REQUEST: {\r\n        draft.isAddingComment = true;\r\n        draft.addCommentErrorReason = '';\r\n        draft.commentAdded = false;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n        draft.mainPosts[postIndex].Comments.push(action.data.comment);\r\n        draft.isAddingComment = false;\r\n        draft.commentAdded = true;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE: {\r\n        draft.isAddingComment = false;\r\n        draft.addingPostErrorReason = action.error;\r\n        break;\r\n      }\r\n      case LOAD_COMMENTS_SUCCESS: {\r\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n        draft.mainPosts[postIndex].Comments = action.data.comments;\r\n        break;\r\n      }\r\n      case LOAD_MAIN_POSTS_REQUEST:\r\n      case LOAD_HASHTAG_POSTS_REQUEST:\r\n      case LOAD_USER_POSTS_REQUEST: {\r\n        draft.mainPosts = !action.lastId ? [] : draft.mainPosts;\r\n        draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\r\n        break;\r\n      }\r\n      case LOAD_MAIN_POSTS_SUCCESS:\r\n      case LOAD_HASHTAG_POSTS_SUCCESS:\r\n      case LOAD_USER_POSTS_SUCCESS: {\r\n        draft.mainPosts = !action.lastId ? [] : draft.mainPosts;\r\n        draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\r\n        break;\r\n      }\r\n      case LOAD_MAIN_POSTS_FAILURE:\r\n      case LOAD_HASHTAG_POSTS_FAILURE:\r\n      case LOAD_USER_POSTS_FAILURE: {\r\n        break;\r\n      }\r\n      case LIKE_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case LIKE_POST_SUCCESS: {\r\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n        draft.mainPosts[postIndex].Likers.unshift({ id: action.data.userId });\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE: {\r\n        break;\r\n      }\r\n      case UNLIKE_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n        const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v => v.id === action.data.userId);\r\n        draft.mainPosts[postIndex].Likers.splice(likeIndex, 1);\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE: {\r\n        break;\r\n      }\r\n      case RETWEET_REQUEST: {\r\n        break;\r\n      }\r\n      case RETWEET_SUCCESS: {\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      }\r\n      case RETWEET_FAILURE: {\r\n        break;\r\n      }\r\n      case REMOVE_POST_REQUEST: {\r\n        break;\r\n      }\r\n      case REMOVE_POST_SUCCESS: {\r\n        const index = draft.mainPosts.findIndex(v => v.id === action.data);\r\n        draft.mainPosts.splice(index, 1);\r\n        break;\r\n      }\r\n      case REMOVE_POST_FAILURE: {\r\n        break;\r\n      }\r\n      case LOAD_POST_SUCCESS: {\r\n        draft.singlePost = action.data;\r\n        break;\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  });\r\n};\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAhIA;AAkIA;AACA;;;;A","sourceRoot":""}