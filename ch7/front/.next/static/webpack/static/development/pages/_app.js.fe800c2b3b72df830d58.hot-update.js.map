{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.fe800c2b3b72df830d58.hot-update.js","sources":["webpack:///./components/AppLayout.js","webpack:///./containers/LoginForm.js","webpack:///./containers/PostForm.js","webpack:///./pages/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport Router from 'next/router';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Col, Input, Menu, Row,\r\n} from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport LoginForm from '../containers/LoginForm';\r\nimport UserProfile from './UserProfile';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst AppLayout = ({ children }) => {\r\n  const { me } = useSelector(state => state.user);\r\n\r\n  const onSearch = (value) => {\r\n    Router.push({ pathname: '/hashtag', query: { tag: value }}, `/hashtag/${value}`);\r\n  //  프로그램적으로 페이지를 바꿀 때는 Router, component적으로 페이지를 바꿀 때 Link\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Menu mode=\"horizontal\">\r\n        <Menu.Item key=\"home\"><Link href=\"/\"><a>노드버드</a></Link></Menu.Item>\r\n        <Menu.Item key=\"profile\"><Link href=\"/profile\"><a>프로필</a></Link></Menu.Item>\r\n        <Menu.Item key=\"mail\">\r\n          <Input.Search enterButton style={{ verticalAlign: 'middle' }}\r\n          onSearch={onSearch}\r\n          />\r\n        </Menu.Item>\r\n      </Menu>\r\n      <Row gutter={8}>\r\n        <Col xs={24} md={6}>\r\n          {me\r\n            ? <UserProfile />\r\n            : <LoginForm />}\r\n        </Col>\r\n        <Col xs={24} md={12}>\r\n          {children}\r\n        </Col>\r\n        <Col xs={24} md={6}>\r\n          <Link href=\"https//www.englishhbus.co.kr\"><a target=\"_blank\">Made by Key Publications</a></Link>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nAppLayout.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default AppLayout;\r\n","import React, { useCallback } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport Link from 'next/link';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInput } from '../pages/signup'; // TODO: util 폴더로 옮기기\nimport { LOG_IN_REQUEST } from '../reducers/user';\n\nconst LoginForm = () => {\n  const [id, onChangeId] = useInput('');\n  const [password, onChangePassword] = useInput('');\n  const { isLoggingIn } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  const onSubmitForm = useCallback((e) => {\n    e.preventDefault();\n    dispatch({\n      type: LOG_IN_REQUEST,\n      data: {\n        userId: id,\n        password,\n      },\n    });\n  }, [id, password]);\n\n  return (\n    <Form onSubmit={onSubmitForm} style={{ padding: '10px' }}>\n      <div>\n        <label htmlFor=\"user-id\">아이디</label>\n        <br />\n        <Input name=\"user-id\" value={id} onChange={onChangeId} required />\n      </div>\n      <div>\n        <label htmlFor=\"user-password\">비밀번호</label>\n        <br />\n        <Input name=\"user-password\" value={password} onChange={onChangePassword} type=\"password\" required />\n      </div>\n      <div style={{ marginTop: '10px' }}>\n        <Button type=\"primary\" htmlType=\"submit\" loading={isLoggingIn}>로그인</Button>\n        <Link href=\"/signup\"><a><Button>회원가입</Button></a></Link>\n      </div>\n    </Form>\n  );\n};\n\nexport default LoginForm;\n","import React, {\r\n  useCallback, useState, useEffect, useRef,\r\n} from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const imageInput = useRef();\r\n\r\n  useEffect(() => {\r\n    setText('');\r\n  }, [postAdded === true]);\r\n\r\n  const onSubmitForm = useCallback((e) => {\r\n    e.preventDefault();\r\n    if (!text || !text.trim()) { // trim() 공백제거 함수\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    const formData = new FormData();\r\n    imagePaths.forEach((i) => {\r\n      formData.append('image', i); // 이미지 넣는 곳\r\n    });\r\n    formData.append('content', text); // 컨텐트 넣는 곳\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n\r\n  // === ajax 전송방법(이미지만 미리 올리는 작업)============================\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log(e.target.files); // 파일들이 들어있는 곳\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f); // key: image, value: f, routes/post.js에서 upload.array()에 append의 이름이 들어감.\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n  // ===================================================================\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click(); // 버튼을 눌었을 때 이벤트 발생\r\n  }, [imageInput.current]);\r\n\r\n  const onRemoveImage = useCallback(index => () => { // onRemoveImage 메소드에 괄호가 불어있으므로 () => () => 를 사용함.(고차함수)\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      index,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\r\n      <Input.TextArea maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" value={text} onChange={onChangeText} />\r\n      <div>\r\n        <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\" loading={isAddingPost}>짹짹</Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v, i) => (\r\n          <div key={v} style={{ display: 'inline-block' }}>\r\n            <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n            <div>\r\n              <Button onClick={onRemoveImage(i)}>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PostForm from '../containers/PostForm';\r\nimport PostCard from '../containers/PostCard';\r\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Home = () => {\r\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\r\n  // const dispatch = useDispatch(); // react를 연결하려는 경우 useDispatch, setState와 동일한 기능은 useDispatch\r\n  const { me } = useSelector(state => state.user); // redux state 갖다 쓰고 싶을 때 useSelect, react의 useState개념\r\n  // console.log(user);\r\n  const dispatch = useDispatch();\r\n\r\n  const onScroll = useCallback(() => {\r\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\r\n    // scrollY: 처음부터 제일 밑으로 내일 위치에서 상단까지의 높이(스크롤 내린 거리)\r\n    // clientHeight: 상단까지의 높이에서 스크롤을 제외한 하단까지의 높이(화면높이)\r\n    // scrollHeight: scrollY + clientHeight 값(전체 화면 길이)\r\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n      if(hasMorePost) {\r\n        dispatch({\r\n          type: LOAD_MAIN_POSTS_REQUEST,\r\n          lastId: mainPosts[mainPosts.length - 1].id,\r\n        })\r\n      }\r\n    }\r\n  },[hasMorePost, mainPosts.length]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  },[mainPosts.length]);\r\n\r\n  return (\r\n    <div>\r\n      {me && <PostForm />}\r\n      {mainPosts.map(c => (\r\n        <PostCard key={c.id} post={c} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nHome.getInitialProps = async (context) => { // pageProps = await Component.getInitialProps(ctx);가 들어감.\r\n  console.log(Object.keys(context));\r\n  context.store.dispatch({\r\n    type: LOAD_MAIN_POSTS_REQUEST,\r\n  });\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5CA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAJA;AAWA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAHA;AAIA;AACA;AACA;AADA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;;;;A","sourceRoot":""}