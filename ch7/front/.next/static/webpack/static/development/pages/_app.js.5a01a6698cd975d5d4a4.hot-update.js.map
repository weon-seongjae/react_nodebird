{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.5a01a6698cd975d5d4a4.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga'; //서버사이드 렌더링에 필수요소\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport Home from \"./index\";\nimport {LOAD_USER_REQUEST} from \"../reducers/user\";\n\nconst NodeBird = ({ Component, store, pageProps }) => ( // hashtag의 component의 props로 넣어줌.\n  <Provider store={store}>\n    <Head>\n      <title>NodeBird</title>\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\" />\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js\" />\n      <link rel=\"stylesheet\" type=\"text/css\" charset=\"UTF-8\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\n    </Head>\n    <AppLayout>\n      <Component {...pageProps} />\n    </AppLayout>\n  </Provider>\n);\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired,\n};\n\n// const middleware = (store) => (next) => (action) => {\n//   next(action);\n// };\n//= =====middleware만드는 방법 : currying - 인자 하나를 받아 다른 함수를 리턴\n\n// ==================next에서 getInitialProps 실행. context도 같이 넣어줌. 이것에 각 Component에서 실행됨.===============\nNodeBird.getInitialProps = async (context) => {\n  console.log(context);\n  const { ctx, Component } = context;\n  let pageProps = {};\n  const state = ctx.store.getState(); // user 정보 가져옴, user 정보도 서버사이드 렌더링 구현됨\n  if (state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST,\n    });\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx); // hashtag.js에서 리턴한 값이 pageProps에 담김. pageProps는 위의 NodeBird의 pageProps로 넘김, index.js의 Home.getInitialProps = async (context)가 됨. 게시글 먼저 가져오는 경우\n  }\n  }\n  return { pageProps }; // component의 props\n};\n// =================================================================================\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = process.env.NODE_ENV === 'production' // 실제 서비스\n    ? compose(applyMiddleware(...middlewares))\n    : compose(\n      applyMiddleware(...middlewares),\n      !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    );\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 서버사이드 렌더링할 때 store.sagaTask를 변수로 설정. withReduxSaga가 내부에서 필요로 함\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));\n\n// 레이아웃은 _app.js에서 코딩을 한다.\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAPA;AAAA;AACA;AAcA;AACA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AADA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAUA;AACA;AAXA;AAAA;AAaA;AAAA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAeA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}