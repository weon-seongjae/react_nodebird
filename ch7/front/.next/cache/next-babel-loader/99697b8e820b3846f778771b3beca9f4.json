{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport produce from 'immer';\nexport var initialState = {\n  // redux에서 중앙통제실\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: '',\n  // 로그인 실패 사유\n  isSignedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  signUpErrorReason: '',\n  // 회원가입 실패사유\n  me: null,\n  // 내 정보\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null,\n  // 남의 정보\n  isEditingNickname: false,\n  // 이름 변경 중\n  editNicknameErrorReason: '',\n  // 이름 변경 실패 사유\n  hasMoreFollower: false,\n  hasMoreFollowing: false\n}; //= =액션의 이름(비동기요청)====================\n\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport var LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport var LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport var LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\nexport var LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\nexport var LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\nexport var LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport var LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport var LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\nexport var LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport var LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport var LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\nexport var FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport var FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport var FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport var UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport var UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport var UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport var REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport var REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport var REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport var EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\nexport var EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\nexport var EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE';\nexport var ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport var REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME'; //= =실제 액션======================\n\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOG_IN_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isLoggingIn: true,\n            logInErrorReason: ''\n          });\n        }\n\n      case LOG_IN_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            isLoggingIn: false,\n            me: action.data,\n            isLoading: false\n          });\n        }\n\n      case LOG_IN_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isLoggingIn: false,\n            logInErrorReason: action.error,\n            me: null\n          });\n        }\n\n      case LOG_OUT_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isLoggingOut: true\n          });\n        }\n\n      case LOG_OUT_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            isLoggingOut: false,\n            me: null\n          });\n        }\n\n      case SIGN_UP_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isSigningUp: true,\n            isSignedUp: false,\n            signUpErrorReason: ''\n          });\n        }\n\n      case SIGN_UP_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            isSigningUp: false,\n            isSignedUp: true\n          });\n        }\n\n      case SIGN_UP_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isSigningUp: false,\n            signUpErrorReason: action.error\n          });\n        }\n\n      case LOAD_USER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LOAD_USER_SUCCESS:\n        {\n          if (action.me) {\n            return _objectSpread({}, state, {\n              me: action.data // 내 정보\n\n            });\n          }\n\n          return _objectSpread({}, state, {\n            userInfo: action.data // 남의 정보\n\n          });\n        }\n\n      case LOAD_USER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case FOLLOW_USER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case FOLLOW_USER_SUCCESS:\n        {\n          draft.me.Followings.unshift({\n            id: action.data\n          });\n          break;\n        }\n\n      case FOLLOW_USER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case UNFOLLOW_USER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case UNFOLLOW_USER_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Followings: state.me.Followings.filter(function (v) {\n                return v.id !== action.data;\n              })\n            }),\n            followingList: state.followingList.filter(function (v) {\n              return v.id !== action.data;\n            })\n          });\n        }\n\n      case UNFOLLOW_USER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case ADD_POST_TO_ME:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Posts: [{\n                id: action.data\n              }].concat(_toConsumableArray(state.me.Posts))\n            })\n          });\n        }\n\n      case REMOVE_POST_OF_ME:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Posts: state.me.Posts.filter(function (v) {\n                return v.id !== action.data;\n              })\n            })\n          });\n        }\n\n      case LOAD_FOLLOWERS_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            hasMoreFollower: action.offset ? state.hasMoreFollower : true // 처음 데이터를 가져올 때는 더보기 버튼 보여주기\n\n          });\n        }\n\n      case LOAD_FOLLOWERS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            followerList: state.followerList.concat(action.data),\n            hasMoreFollower: action.data.length === 3\n          });\n        }\n\n      case LOAD_FOLLOWERS_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LOAD_FOLLOWINGS_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            hasMoreFollowing: action.offset ? state.hasMoreFollowing : true\n          });\n        }\n\n      case LOAD_FOLLOWINGS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            followingList: state.followingList.concat(action.data),\n            hasMoreFollowing: action.data.length === 3\n          });\n        }\n\n      case LOAD_FOLLOWINGS_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_FOLLOWER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_FOLLOWER_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Followers: state.me.Followers.filter(function (v) {\n                return v.id !== action.data;\n              })\n            }),\n            followerList: state.followerList.filter(function (v) {\n              return v.id !== action.data;\n            })\n          });\n        }\n\n      case REMOVE_FOLLOWER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case EDIT_NICKNAME_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: true,\n            editNicknameErrorReason: ''\n          });\n        }\n\n      case EDIT_NICKNAME_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: false,\n            me: _objectSpread({}, state.me, {\n              nickname: action.data\n            })\n          });\n        }\n\n      case EDIT_NICKNAME_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: false,\n            editNicknameErrorReason: action.error\n          });\n        }\n\n      default:\n        {\n          return _objectSpread({}, state);\n        }\n    }\n  });\n});","map":{"version":3,"sources":["C:\\react-nodebird\\ch7\\front\\reducers\\user.js"],"names":["produce","initialState","isLoggingOut","isLoggingIn","logInErrorReason","isSignedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","isEditingNickname","editNicknameErrorReason","hasMoreFollower","hasMoreFollowing","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","EDIT_NICKNAME_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","state","action","draft","type","data","isLoading","error","Followings","unshift","id","filter","v","Posts","offset","concat","length","Followers","nickname"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = { // redux에서 중앙통제실\r\n  isLoggingOut: false, // 로그아웃 시도중\r\n  isLoggingIn: false, // 로그인 시도중\r\n  logInErrorReason: '', // 로그인 실패 사유\r\n  isSignedUp: false, // 회원가입 성공\r\n  isSigningUp: false, // 회원가입 시도중\r\n  signUpErrorReason: '', // 회원가입 실패사유\r\n  me: null, // 내 정보\r\n  followingList: [], // 팔로잉 리스트\r\n  followerList: [], // 팔로워 리스트\r\n  userInfo: null, // 남의 정보\r\n  isEditingNickname: false, // 이름 변경 중\r\n  editNicknameErrorReason: '', // 이름 변경 실패 사유\r\n  hasMoreFollower: false,\r\n  hasMoreFollowing: false,\r\n};\r\n\r\n//= =액션의 이름(비동기요청)====================\r\n\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n\r\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\r\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\r\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\r\n\r\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\r\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\r\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\r\n\r\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\r\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\r\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\r\n\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n\r\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\r\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\r\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\n//= =실제 액션======================\r\n\r\nexport default (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOG_IN_REQUEST: {\r\n        return {\r\n          ...state,\r\n          isLoggingIn: true,\r\n          logInErrorReason: '',\r\n        };\r\n      }\r\n      case LOG_IN_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          isLoggingIn: false,\r\n          me: action.data,\r\n          isLoading: false,\r\n        };\r\n      }\r\n      case LOG_IN_FAILURE: {\r\n        return {\r\n          ...state,\r\n          isLoggingIn: false,\r\n          logInErrorReason: action.error,\r\n          me: null,\r\n        };\r\n      }\r\n      case LOG_OUT_REQUEST: {\r\n        return {\r\n          ...state,\r\n          isLoggingOut: true,\r\n        };\r\n      }\r\n      case LOG_OUT_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          isLoggingOut: false,\r\n          me: null,\r\n        };\r\n      }\r\n      case SIGN_UP_REQUEST: {\r\n        return {\r\n          ...state,\r\n          isSigningUp: true,\r\n          isSignedUp: false,\r\n          signUpErrorReason: '',\r\n        };\r\n      }\r\n      case SIGN_UP_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          isSigningUp: false,\r\n          isSignedUp: true,\r\n        };\r\n      }\r\n      case SIGN_UP_FAILURE: {\r\n        return {\r\n          ...state,\r\n          isSigningUp: false,\r\n          signUpErrorReason: action.error,\r\n        };\r\n      }\r\n      case LOAD_USER_REQUEST: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case LOAD_USER_SUCCESS: {\r\n        if (action.me) {\r\n          return {\r\n            ...state,\r\n            me: action.data, // 내 정보\r\n          };\r\n        }\r\n        return {\r\n          ...state,\r\n          userInfo: action.data, // 남의 정보\r\n        };\r\n      }\r\n      case LOAD_USER_FAILURE: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case FOLLOW_USER_REQUEST: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case FOLLOW_USER_SUCCESS: {\r\n        draft.me.Followings.unshift({ id: action.data });\r\n        break;\r\n      }\r\n      case FOLLOW_USER_FAILURE: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case UNFOLLOW_USER_REQUEST: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case UNFOLLOW_USER_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          me: {\r\n            ...state.me,\r\n            Followings: state.me.Followings.filter(v => v.id !== action.data),\r\n          },\r\n          followingList: state.followingList.filter(v => v.id !== action.data),\r\n        };\r\n      }\r\n      case UNFOLLOW_USER_FAILURE: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case ADD_POST_TO_ME: {\r\n        return {\r\n          ...state,\r\n          me: {\r\n            ...state.me,\r\n            Posts: [{id: action.data}, ...state.me.Posts],\r\n          },\r\n        };\r\n      }\r\n      case REMOVE_POST_OF_ME: {\r\n        return {\r\n          ...state,\r\n          me: {\r\n            ...state.me,\r\n            Posts: state.me.Posts.filter(v => v.id !== action.data),\r\n          },\r\n        };\r\n      }\r\n      case LOAD_FOLLOWERS_REQUEST: {\r\n        return {\r\n          ...state,\r\n          hasMoreFollower: action.offset ? state.hasMoreFollower : true, // 처음 데이터를 가져올 때는 더보기 버튼 보여주기\r\n        };\r\n      }\r\n      case LOAD_FOLLOWERS_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          followerList: state.followerList.concat(action.data),\r\n          hasMoreFollower: action.data.length === 3,\r\n        };\r\n      }\r\n      case LOAD_FOLLOWERS_FAILURE: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case LOAD_FOLLOWINGS_REQUEST: {\r\n        return {\r\n          ...state,\r\n          hasMoreFollowing: action.offset ? state.hasMoreFollowing : true,\r\n        };\r\n      }\r\n      case LOAD_FOLLOWINGS_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          followingList: state.followingList.concat(action.data),\r\n          hasMoreFollowing: action.data.length === 3,\r\n        };\r\n      }\r\n      case LOAD_FOLLOWINGS_FAILURE: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case REMOVE_FOLLOWER_REQUEST: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case REMOVE_FOLLOWER_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          me: {\r\n            ...state.me,\r\n            Followers: state.me.Followers.filter(v => v.id !== action.data),\r\n          },\r\n          followerList: state.followerList.filter(v => v.id !== action.data),\r\n        };\r\n      }\r\n      case REMOVE_FOLLOWER_FAILURE: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case EDIT_NICKNAME_REQUEST: {\r\n        return {\r\n          ...state,\r\n          isEditingNickname: true,\r\n          editNicknameErrorReason: '',\r\n        };\r\n      }\r\n      case EDIT_NICKNAME_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          isEditingNickname: false,\r\n          me: {\r\n            ...state.me,\r\n            nickname: action.data,\r\n          },\r\n        };\r\n      }\r\n      case EDIT_NICKNAME_FAILURE: {\r\n        return {\r\n          ...state,\r\n          isEditingNickname: false,\r\n          editNicknameErrorReason: action.error,\r\n        };\r\n      }\r\n      default: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}