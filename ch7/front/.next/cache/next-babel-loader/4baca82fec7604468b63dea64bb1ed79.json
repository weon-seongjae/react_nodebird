{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(uploadImages),\n    _marked14 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(likePost),\n    _marked16 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLikePost),\n    _marked17 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(unlikePost),\n    _marked18 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(retweet),\n    _marked20 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRetweet),\n    _marked21 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removePost),\n    _marked22 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRemovePost),\n    _marked23 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, takeEvery, put, delay, call, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, RETWEET_REQUEST, RETWEET_FAILURE, RETWEET_SUCCESS, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    // postData에 게시글 들어있음\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            // user reducer의 데이터를 수정\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n} // ===================================================================================\n\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadMainPostsAPI() {\n  var lastId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  return axios.get(\"/posts?lastId=\".concat(lastId, \"&limit=\").concat(limit)); // 서버에 요청\n  // withCredentials : true는 붙이지 않아도 됨. 로그인하지 않는 사람도 게시글은 볼 수 있음.\n}\n\nfunction loadMainPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadMainPostsAPI, action.lastId);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return throttle(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // ===================================================================================\n\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(tag), \"?lastId=\").concat(lastId, \"&limit=10\")); // 서버에 요청\n  // withCredentials : true는 붙이지 않아도 됨. 로그인하지 않는 사람도 게시글은 볼 수 있음.\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // ==========================================================================================\n\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id || 0, \"/posts\")); // 서버에 요청\n  // withCredentials : true는 붙이지 않아도 됨. 로그인하지 않는 사람도 게시글은 볼 수 있음.\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} // ==========================================================================================\n\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              // action 안에 들어있는 data.postId\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context9.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n} // ==========================게시글 불러오기 ====================================================\n\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context11.next = 12;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 12;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n} // =======================================================================\n\n\nfunction uploadImagesAPI(formData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/post/images', formData, {\n    withCredentials: true // 로그인한 사용자만 이미지 올릴 수 있음.\n\n  });\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            // put은 dispatch 동일\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data // result.data: 서버쪽에서 저정된 이미지 주소\n\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context13.t0);\n          _context13.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeEvery(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} // =======================================================================\n\n\nfunction likePostAPI(postId) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true // 로그인한 사용자만 이미지 올릴 수 있음.\n\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            // put은 dispatch 동일\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeEvery(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n} // =======================================================================\n\n\nfunction unlikePostAPI(postId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true // 로그인한 사용자만 이미지 올릴 수 있음.\n\n  });\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            // put은 dispatch 동일\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeEvery(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n} // =======================================================================\n\n\nfunction retweetAPI(postId) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    // post로 요청할 때는 data가 없더라도 빈 객체라도 넣어주어야 함.\n    withCredentials: true // 로그인한 사용자만 이미지 올릴 수 있음.\n\n  });\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            // put은 dispatch 동일\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context19.next = 14;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n          alert(_context19.t0.response && _context19.t0.response.data);\n\n        case 14:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n} // =======================================================================\n\n\nfunction removePostAPI(postId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(\"/post/\".concat(postId), {\n    // post로 요청할 때는 data가 없더라도 빈 객체라도 넣어주어야 함.\n    withCredentials: true // 로그인한 사용자만 이미지 올릴 수 있음.\n\n  });\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.prev = 0;\n          _context21.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context21.sent;\n          _context21.next = 6;\n          return put({\n            // put은 dispatch 동일\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context21.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data\n          });\n\n        case 8:\n          _context21.next = 15;\n          break;\n\n        case 10:\n          _context21.prev = 10;\n          _context21.t0 = _context21[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context21.t0);\n          _context21.next = 15;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context21.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21, null, [[0, 10]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}","map":{"version":3,"sources":["C:\\react-nodebird\\ch7\\front\\sagas\\post.js"],"names":["addPost","watchAddPost","loadMainPosts","watchLoadMainPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","addComment","watchAddComment","loadComments","watchLoadComments","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","retweet","watchRetweet","removePost","watchRemovePost","postSaga","all","fork","takeLatest","takeEvery","put","delay","call","throttle","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_COMMENTS_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","RETWEET_REQUEST","RETWEET_FAILURE","RETWEET_SUCCESS","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","postData","post","withCredentials","action","data","result","type","id","error","loadMainPostsAPI","lastId","limit","get","loadHashtagPostsAPI","tag","encodeURIComponent","loadUserPostsAPI","console","addCommentAPI","postId","content","comment","loadCommentsAPI","comments","uploadImagesAPI","formData","likePostAPI","userId","unlikePostAPI","delete","retweetAPI","alert","response","removePostAPI"],"mappings":"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","sourcesContent":["import {\r\n  all, fork, takeLatest, takeEvery, put, delay, call, throttle\r\n} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  LOAD_MAIN_POSTS_FAILURE,\r\n  LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_FAILURE,\r\n  LOAD_HASHTAG_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_COMMENTS_SUCCESS,\r\n  LOAD_COMMENTS_FAILURE,\r\n  LOAD_COMMENTS_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  RETWEET_REQUEST,\r\n  RETWEET_FAILURE,\r\n  RETWEET_SUCCESS,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n} from '../reducers/post';\r\nimport {ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, { // postData에 게시글 들어있음\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({ // user reducer의 데이터를 수정\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\n// ===================================================================================\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\r\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`); // 서버에 요청\r\n  // withCredentials : true는 붙이지 않아도 됨. 로그인하지 않는 사람도 게시글은 볼 수 있음.\r\n}\r\n\r\nfunction* loadMainPosts(action) {\r\n  try {\r\n    const result = yield call(loadMainPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  yield throttle(LOAD_MAIN_POSTS_REQUEST, loadMainPosts); // throttle 연달아 호출되는 것을 막아주는 기능\r\n}\r\n// ===================================================================================\r\n\r\nfunction loadHashtagPostsAPI(tag, lastId) {\r\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`); // 서버에 요청\r\n  // withCredentials : true는 붙이지 않아도 됨. 로그인하지 않는 사람도 게시글은 볼 수 있음.\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n// ==========================================================================================\r\n\r\nfunction loadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id || 0}/posts`); // 서버에 요청\r\n  // withCredentials : true는 붙이지 않아도 됨. 로그인하지 않는 사람도 게시글은 볼 수 있음.\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n// ==========================================================================================\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, { content: data.content }, { withCredentials: true });\r\n}\r\n\r\nfunction* addComment(action) { // action : request에 대한 action\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId, // action 안에 들어있는 data.postId\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 위의 function* addComment에 대한 action\r\n}\r\n\r\n// ==========================게시글 불러오기 ====================================================\r\n\r\nfunction loadCommentsAPI(postId) {\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) { // action : request에 대한 action\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments); // 위의 function* addComment에 대한 action\r\n}\r\n\r\n// =======================================================================\r\n\r\nfunction uploadImagesAPI(formData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/post/images', formData, {\r\n    withCredentials: true, // 로그인한 사용자만 이미지 올릴 수 있음.\r\n  });\r\n}\r\n\r\nfunction* uploadImages(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\r\n  try {\r\n    // yield call(uploadImagesAPI);\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data, // result.data: 서버쪽에서 저정된 이미지 주소\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeEvery(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\n// =======================================================================\r\n\r\nfunction likePostAPI(postId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post(`/post/${postId}/like`, {}, {\r\n    withCredentials: true, // 로그인한 사용자만 이미지 올릴 수 있음.\r\n  });\r\n}\r\n\r\nfunction* likePost(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\r\n  try {\r\n    // yield call(likePostAPI);\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      },\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeEvery(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\n// =======================================================================\r\n\r\nfunction unlikePostAPI(postId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.delete(`/post/${postId}/like`, {\r\n    withCredentials: true, // 로그인한 사용자만 이미지 올릴 수 있음.\r\n  });\r\n}\r\n\r\nfunction* unlikePost(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\r\n  try {\r\n    // yield call(unlikePostAPI);\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      },\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeEvery(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\n// =======================================================================\r\n\r\nfunction retweetAPI(postId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post(`/post/${postId}/retweet`, {}, { // post로 요청할 때는 data가 없더라도 빈 객체라도 넣어주어야 함.\r\n    withCredentials: true, // 로그인한 사용자만 이미지 올릴 수 있음.\r\n  });\r\n}\r\n\r\nfunction* retweet(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\r\n  try {\r\n    // yield call(retweetAPI);\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: e,\r\n    });\r\n    alert(e.response && e.response.data);\r\n  }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\n// =======================================================================\r\n\r\nfunction removePostAPI(postId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.delete(`/post/${postId}`, { // post로 요청할 때는 data가 없더라도 빈 객체라도 넣어주어야 함.\r\n    withCredentials: true, // 로그인한 사용자만 이미지 올릴 수 있음.\r\n  });\r\n}\r\n\r\nfunction* removePost(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\r\n  try {\r\n    // yield call(removePostAPI);\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchRetweet),\r\n    fork(watchRemovePost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}