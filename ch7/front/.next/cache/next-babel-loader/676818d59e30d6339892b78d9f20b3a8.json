{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var imageInput = useRef();\n  useEffect(function () {\n    setText('');\n  }, [postAdded === true]);\n  var onSubmitForm = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      // trim() 공백제거 함수\n      return alert('게시글을 작성하세요.');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (i) {\n      formData.append('image', i); // 이미지 넣는 곳\n    });\n    formData.append('content', text); // 컨텐트 넣는 곳\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []); // === ajax 전송방법(이미지만 미리 올리는 작업)============================\n\n  var onChangeImages = useCallback(function (e) {\n    console.log(e.target.files); // 파일들이 들어있는 곳\n\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f); // key: image, value: f, routes/post.js에서 upload.array()에 append의 이름이 들어감.\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []); // ===================================================================\n\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click(); // 버튼을 눌었을 때 이벤트 발생\n  }, [imageInput.current]);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      // onRemoveImage 메소드에 괄호가 불어있으므로 () => () => 를 사용함.(고차함수)\n      dispatch({\n        type: REMOVE_IMAGE,\n        index: index\n      });\n    };\n  }, []);\n  return React.createElement(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onSubmit: onSubmitForm\n  }, React.createElement(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    value: text,\n    onChange: onChangeText\n  }), React.createElement(\"div\", null, React.createElement(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), React.createElement(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), React.createElement(Button, {\n    type: \"primary\",\n    style: {\n      float: 'right'\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"\\uC9F9\\uC9F9\")), React.createElement(\"div\", null, imagePaths.map(function (v, i) {\n    return React.createElement(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block'\n      }\n    }, React.createElement(\"img\", {\n      src: \"http://localhost:3065/\".concat(v),\n      style: {\n        width: '200px'\n      },\n      alt: v\n    }), React.createElement(\"div\", null, React.createElement(Button, {\n      onClick: onRemoveImage(i)\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:\\react-nodebird\\ch7\\front\\components\\PostForm.js"],"names":["React","useCallback","useState","useEffect","useRef","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","PostForm","dispatch","text","setText","state","post","imagePaths","isAddingPost","postAdded","imageInput","onSubmitForm","e","preventDefault","trim","alert","formData","FormData","forEach","i","append","type","data","onChangeText","target","value","onChangeImages","console","log","files","imageFormData","call","f","onClickImageUpload","current","click","onRemoveImage","index","margin","float","map","v","display","width"],"mappings":"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","sourcesContent":["import React, {\r\n  useCallback, useState, useEffect, useRef,\r\n} from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const imageInput = useRef();\r\n\r\n  useEffect(() => {\r\n    setText('');\r\n  }, [postAdded === true]);\r\n\r\n  const onSubmitForm = useCallback((e) => {\r\n    e.preventDefault();\r\n    if (!text || !text.trim()) { // trim() 공백제거 함수\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    const formData = new FormData();\r\n    imagePaths.forEach((i) => {\r\n      formData.append('image', i); // 이미지 넣는 곳\r\n    });\r\n    formData.append('content', text); // 컨텐트 넣는 곳\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n\r\n  // === ajax 전송방법(이미지만 미리 올리는 작업)============================\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log(e.target.files); // 파일들이 들어있는 곳\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f); // key: image, value: f, routes/post.js에서 upload.array()에 append의 이름이 들어감.\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n  // ===================================================================\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click(); // 버튼을 눌었을 때 이벤트 발생\r\n  }, [imageInput.current]);\r\n\r\n  const onRemoveImage = useCallback(index => () => { // onRemoveImage 메소드에 괄호가 불어있으므로 () => () => 를 사용함.(고차함수)\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      index,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\r\n      <Input.TextArea maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" value={text} onChange={onChangeText} />\r\n      <div>\r\n        <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\" loading={isAddingPost}>짹짹</Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v, i) => (\r\n          <div key={v} style={{ display: 'inline-block' }}>\r\n            <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n            <div>\r\n              <Button onClick={onRemoveImage(i)}>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n"]},"metadata":{},"sourceType":"module"}