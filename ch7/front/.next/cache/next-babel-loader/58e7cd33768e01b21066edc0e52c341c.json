{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React, { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\nvar Home = function Home() {\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePost = _useSelector.hasMorePost; // const dispatch = useDispatch(); // react를 연결하려는 경우 useDispatch, setState와 동일한 기능은 useDispatch\n\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me; // redux state 갖다 쓰고 싶을 때 useSelect, react의 useState개념\n  // console.log(user);\n\n\n  var dispatch = useDispatch();\n  var onScroll = useCallback(function () {\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight); // scrollY: 처음부터 제일 밑으로 내일 위치에서 상단까지의 높이(스크롤 내린 거리)\n    // clientHeight: 상단까지의 높이에서 스크롤을 제외한 하단까지의 높이(화면높이)\n    // scrollHeight: scrollY + clientHeight 값(전체 화면 길이)\n\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        dispatch({\n          type: LOAD_MAIN_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length - 1].id\n        });\n      }\n    }\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(function () {\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return React.createElement(\"div\", null, me && React.createElement(PostForm, null), mainPosts.map(function (c) {\n    return React.createElement(PostCard, {\n      key: c,\n      post: c\n    });\n  }));\n};\n\nHome.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // pageProps = await Component.getInitialProps(ctx);가 들어감.\n            console.log(_Object$keys(context));\n            context.store.dispatch({\n              type: LOAD_MAIN_POSTS_REQUEST\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Home;","map":{"version":3,"sources":["C:\\react-nodebird\\ch7\\front\\pages\\index.js"],"names":["React","useEffect","useCallback","useSelector","useDispatch","PostForm","PostCard","LOAD_MAIN_POSTS_REQUEST","Home","state","post","mainPosts","hasMorePost","user","me","dispatch","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","lastId","length","id","addEventListener","removeEventListener","map","c","getInitialProps","context","store"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,uBAAT,QAAwC,kBAAxC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,qBACkBL,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAD7B;AAAA,MACTC,SADS,gBACTA,SADS;AAAA,MACEC,WADF,gBACEA,WADF,EAEjB;;;AAFiB,sBAGFT,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACI,IAAV;AAAA,GAAN,CAHT;AAAA,MAGTC,EAHS,iBAGTA,EAHS,EAGgC;AACjD;;;AACA,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;AAEA,MAAMY,QAAQ,GAAGd,WAAW,CAAC,YAAM;AACjCe,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F,EADiC,CAEjC;AACA;AACA;;AACA,QAAIL,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACxG,UAAGZ,WAAH,EAAgB;AACdG,QAAAA,QAAQ,CAAC;AACPU,UAAAA,IAAI,EAAElB,uBADC;AAEPmB,UAAAA,MAAM,EAAEf,SAAS,CAACA,SAAS,CAACgB,MAAV,GAAmB,CAApB,CAAT,CAAgCC;AAFjC,SAAD,CAAR;AAID;AACF;AACF,GAb2B,EAa1B,CAAChB,WAAD,EAAcD,SAAS,CAACgB,MAAxB,CAb0B,CAA5B;AAeA1B,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAiCb,QAAjC;AACA,WAAO,YAAM;AACXG,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCd,QAArC;AACD,KAFD;AAGD,GALQ,EAKP,CAACL,SAAS,CAACgB,MAAX,CALO,CAAT;AAOA,SACE,iCACGb,EAAE,IAAI,oBAAC,QAAD,OADT,EAEGH,SAAS,CAACoB,GAAV,CAAc,UAAAC,CAAC;AAAA,WACd,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAkB,MAAA,IAAI,EAAEA;AAAxB,MADc;AAAA,GAAf,CAFH,CADF;AAQD,CArCD;;AAuCAxB,IAAI,CAACyB,eAAL;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAqB;AAC1CjB,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAYgB,OAAZ,CAAZ;AACAA,YAAAA,OAAO,CAACC,KAAR,CAAcpB,QAAd,CAAuB;AACrBU,cAAAA,IAAI,EAAElB;AADe,aAAvB;;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAeC,IAAf","sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Home = () => {\r\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\r\n  // const dispatch = useDispatch(); // react를 연결하려는 경우 useDispatch, setState와 동일한 기능은 useDispatch\r\n  const { me } = useSelector(state => state.user); // redux state 갖다 쓰고 싶을 때 useSelect, react의 useState개념\r\n  // console.log(user);\r\n  const dispatch = useDispatch();\r\n\r\n  const onScroll = useCallback(() => {\r\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\r\n    // scrollY: 처음부터 제일 밑으로 내일 위치에서 상단까지의 높이(스크롤 내린 거리)\r\n    // clientHeight: 상단까지의 높이에서 스크롤을 제외한 하단까지의 높이(화면높이)\r\n    // scrollHeight: scrollY + clientHeight 값(전체 화면 길이)\r\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n      if(hasMorePost) {\r\n        dispatch({\r\n          type: LOAD_MAIN_POSTS_REQUEST,\r\n          lastId: mainPosts[mainPosts.length - 1].id,\r\n        })\r\n      }\r\n    }\r\n  },[hasMorePost, mainPosts.length]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll',onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  },[mainPosts.length]);\r\n\r\n  return (\r\n    <div>\r\n      {me && <PostForm />}\r\n      {mainPosts.map(c => (\r\n        <PostCard key={c} post={c} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nHome.getInitialProps = async (context) => { // pageProps = await Component.getInitialProps(ctx);가 들어감.\r\n  console.log(Object.keys(context));\r\n  context.store.dispatch({\r\n    type: LOAD_MAIN_POSTS_REQUEST,\r\n  });\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}