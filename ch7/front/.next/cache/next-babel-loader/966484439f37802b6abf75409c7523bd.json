{"ast":null,"code":"import Link from 'next/link';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar PostCardContent = function PostCardContent(_ref) {\n  var postData = _ref.postData;\n  return React.createElement(\"div\", null, postData.split(/(#[^\\s]+)/g).map(function (v) {\n    // 해시태그를 넣고 쪼개는 regex\n    if (v.match(/#[^\\s]+/)) {\n      // 쪼갠 배열이 해시태그면\n      return React.createElement(Link, {\n        href: {\n          pathname: '/hashtag',\n          query: {\n            tag: v.slice(1)\n          }\n        },\n        as: \"/hashtag/\".concat(v.slice(1)),\n        key: v\n      }, React.createElement(\"a\", null, v)) // 링크로 바꿔준다.\n      // 프론트 주소는 href안에, 서버쪽 주소는 as안에 써준다.\n      ;\n    }\n\n    return v; // 쪼갠 배열이 해시태그가 아니면 그냥 문자열로 반환\n  }));\n};\n\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired\n};\nexport default PostCardContent;","map":{"version":3,"sources":["C:\\react-git\\ch7\\front\\components\\PostCardContent.js"],"names":["Link","React","PropTypes","PostCardContent","postData","split","map","v","match","pathname","query","tag","slice","propTypes","string","isRequired"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SACtB,iCACGA,QAAQ,CAACC,KAAT,CAAe,YAAf,EAA6BC,GAA7B,CAAiC,UAACC,CAAD,EAAO;AAAE;AACzC,QAAIA,CAAC,CAACC,KAAF,CAAQ,SAAR,CAAJ,EAAwB;AAAE;AACxB,aACE,oBAAC,IAAD;AACE,QAAA,IAAI,EAAE;AAAEC,UAAAA,QAAQ,EAAE,UAAZ;AAAwBC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,GAAG,EAAEJ,CAAC,CAACK,KAAF,CAAQ,CAAR;AAAP;AAA/B,SADR;AAEE,QAAA,EAAE,qBAAcL,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAd,CAFJ;AAGE,QAAA,GAAG,EAAEL;AAHP,SAKE,+BAAIA,CAAJ,CALF,CADF,CAOU;AACV;AARA;AAUD;;AACD,WAAOA,CAAP,CAbuC,CAa7B;AACX,GAdA,CADH,CADsB;AAAA,CAAxB;;AAoBAJ,eAAe,CAACU,SAAhB,GAA4B;AAC1BT,EAAAA,QAAQ,EAAEF,SAAS,CAACY,MAAV,CAAiBC;AADD,CAA5B;AAIA,eAAeZ,eAAf","sourcesContent":["import Link from 'next/link';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PostCardContent = ({ postData }) => (\r\n  <div>\r\n    {postData.split(/(#[^\\s]+)/g).map((v) => { // 해시태그를 넣고 쪼개는 regex\r\n      if (v.match(/#[^\\s]+/)) { // 쪼갠 배열이 해시태그면\r\n        return (\r\n          <Link\r\n            href={{ pathname: '/hashtag', query: { tag: v.slice(1) } }}\r\n            as={`/hashtag/${v.slice(1)}`}\r\n            key={v}\r\n          >\r\n            <a>{v}</a>\r\n          </Link> // 링크로 바꿔준다.\r\n        // 프론트 주소는 href안에, 서버쪽 주소는 as안에 써준다.\r\n        );\r\n      }\r\n      return v; // 쪼갠 배열이 해시태그가 아니면 그냥 문자열로 반환\r\n    })}\r\n  </div>\r\n);\r\n\r\nPostCardContent.propTypes = {\r\n  postData: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PostCardContent;\r\n"]},"metadata":{},"sourceType":"module"}