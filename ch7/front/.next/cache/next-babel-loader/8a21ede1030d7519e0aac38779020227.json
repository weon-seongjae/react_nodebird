{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: '',\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false,\n  singlePost: null\n};\nexport var LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport var LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport var LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport var LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport var LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        {\n          break;\n        }\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          action.data.forEach(function (p) {\n            draft.imagePaths.push(p);\n          });\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        {\n          break;\n        }\n\n      case REMOVE_IMAGE:\n        {\n          var index = draft.imagePaths.findIndex(function (v, i) {\n            return i === action.index;\n          });\n          draft.imagePaths.splice(index, 1);\n          break;\n        }\n\n      case ADD_POST_REQUEST:\n        {\n          draft.isAddingPost = true;\n          draft.addingPostErrorReason = '';\n          draft.postAdded = false;\n          break;\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.isAddingPost = false;\n          draft.mainPosts.unshift(action.data);\n          draft.postAdded = true;\n          draft.imagePaths = [];\n          break;\n        }\n\n      case ADD_POST_FAILURE:\n        {\n          draft.isAddingPost = false;\n          draft.addPostErrorReason = action.error;\n          break;\n        }\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.isAddingComment = true;\n          draft.addCommentErrorReason = '';\n          draft.commentAdded = false;\n          break;\n        }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var postIndex = draft.mainPosts.findIndex(function (v) {\n            return v.id === action.data.postId;\n          });\n          draft.mainPosts[postIndex].Comments.push(action.data.comment);\n          draft.isAddingComment = false;\n          draft.commentAdded = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        {\n          draft.isAddingComment = false;\n          draft.addingPostErrorReason = action.error;\n          break;\n        }\n\n      case LOAD_COMMENTS_SUCCESS:\n        {\n          var _postIndex = draft.mainPosts.findIndex(function (v) {\n            return v.id === action.data.postId;\n          });\n\n          draft.mainPosts[_postIndex].Comments = action.data.comments;\n          break;\n        }\n\n      case LOAD_MAIN_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST:\n        {\n          draft.mainPosts = !action.lastId ? [] : draft.mainPosts;\n          draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\n          break;\n        }\n\n      case LOAD_MAIN_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_USER_POSTS_SUCCESS:\n        {\n          action.data.forEach(function (d) {\n            draft.mainPosts.push(d);\n          });\n          draft.hasMorePost = action.data.length === 10;\n          break;\n        }\n\n      case LOAD_MAIN_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_USER_POSTS_FAILURE:\n        {\n          break;\n        }\n\n      case LIKE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case LIKE_POST_SUCCESS:\n        {\n          var _postIndex2 = draft.mainPosts.findIndex(function (v) {\n            return v.id === action.data.postId;\n          });\n\n          draft.mainPosts[_postIndex2].Likers.unshift({\n            id: action.data.userId\n          });\n\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case UNLIKE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _postIndex3 = draft.mainPosts.findIndex(function (v) {\n            return v.id === action.data.postId;\n          });\n\n          var likeIndex = draft.mainPosts[_postIndex3].Likers.findIndex(function (v) {\n            return v.id === action.data.userId;\n          });\n\n          draft.mainPosts[_postIndex3].Likers.splice(likeIndex, 1);\n\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case RETWEET_REQUEST:\n        {\n          break;\n        }\n\n      case RETWEET_SUCCESS:\n        {\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        {\n          break;\n        }\n\n      case REMOVE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          var _index = draft.mainPosts.findIndex(function (v) {\n            return v.id === action.data;\n          });\n\n          draft.mainPosts.splice(_index, 1);\n          break;\n        }\n\n      case REMOVE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case LOAD_POST_SUCCESS:\n        {\n          draft.singlePost = action.data;\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n});","map":{"version":3,"sources":["C:\\react-git\\ch7\\front\\reducers\\post.js"],"names":["produce","initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","singlePost","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","state","action","draft","type","data","forEach","p","push","index","findIndex","v","i","splice","addingPostErrorReason","unshift","error","postIndex","id","postId","Comments","comment","comments","lastId","hasMorePost","d","length","Likers","userId","likeIndex"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\nexport const initialState = {\n  mainPosts: [], // 화면에 보일 포스트들\n  imagePaths: [], // 미리보기 이미지 경로\n  addPostErrorReason: '', // 포스트 업로드 실패 사유\n  isAddingPost: false, // 포스트 업로드 중\n  postAdded: false, // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false,\n  singlePost: null,\n};\n\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\n\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport default (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST: {\n        break;\n      }\n      case UPLOAD_IMAGES_SUCCESS: {\n        action.data.forEach((p) => {\n          draft.imagePaths.push(p);\n        });\n        break;\n      }\n      case UPLOAD_IMAGES_FAILURE: {\n        break;\n      }\n      case REMOVE_IMAGE: {\n        const index = draft.imagePaths.findIndex((v, i) => i === action.index);\n        draft.imagePaths.splice(index, 1);\n        break;\n      }\n      case ADD_POST_REQUEST: {\n        draft.isAddingPost = true;\n        draft.addingPostErrorReason = '';\n        draft.postAdded = false;\n        break;\n      }\n      case ADD_POST_SUCCESS: {\n        draft.isAddingPost = false;\n        draft.mainPosts.unshift(action.data);\n        draft.postAdded = true;\n        draft.imagePaths = [];\n        break;\n      }\n      case ADD_POST_FAILURE: {\n        draft.isAddingPost = false;\n        draft.addPostErrorReason = action.error;\n        break;\n      }\n      case ADD_COMMENT_REQUEST: {\n        draft.isAddingComment = true;\n        draft.addCommentErrorReason = '';\n        draft.commentAdded = false;\n        break;\n      }\n      case ADD_COMMENT_SUCCESS: {\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n        draft.mainPosts[postIndex].Comments.push(action.data.comment);\n        draft.isAddingComment = false;\n        draft.commentAdded = true;\n        break;\n      }\n      case ADD_COMMENT_FAILURE: {\n        draft.isAddingComment = false;\n        draft.addingPostErrorReason = action.error;\n        break;\n      }\n      case LOAD_COMMENTS_SUCCESS: {\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n        draft.mainPosts[postIndex].Comments = action.data.comments;\n        break;\n      }\n      case LOAD_MAIN_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST: {\n        draft.mainPosts = !action.lastId ? [] : draft.mainPosts;\n        draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\n        break;\n      }\n      case LOAD_MAIN_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_USER_POSTS_SUCCESS: {\n        action.data.forEach((d) => {\n          draft.mainPosts.push(d);\n        });\n        draft.hasMorePost = action.data.length === 10;\n        break;\n      }\n      case LOAD_MAIN_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_USER_POSTS_FAILURE: {\n        break;\n      }\n      case LIKE_POST_REQUEST: {\n        break;\n      }\n      case LIKE_POST_SUCCESS: {\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n        draft.mainPosts[postIndex].Likers.unshift({ id: action.data.userId });\n        break;\n      }\n      case LIKE_POST_FAILURE: {\n        break;\n      }\n      case UNLIKE_POST_REQUEST: {\n        break;\n      }\n      case UNLIKE_POST_SUCCESS: {\n        const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n        const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v => v.id === action.data.userId);\n        draft.mainPosts[postIndex].Likers.splice(likeIndex, 1);\n        break;\n      }\n      case UNLIKE_POST_FAILURE: {\n        break;\n      }\n      case RETWEET_REQUEST: {\n        break;\n      }\n      case RETWEET_SUCCESS: {\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n      case RETWEET_FAILURE: {\n        break;\n      }\n      case REMOVE_POST_REQUEST: {\n        break;\n      }\n      case REMOVE_POST_SUCCESS: {\n        const index = draft.mainPosts.findIndex(v => v.id === action.data);\n        draft.mainPosts.splice(index, 1);\n        break;\n      }\n      case REMOVE_POST_FAILURE: {\n        break;\n      }\n      case LOAD_POST_SUCCESS: {\n        draft.singlePost = action.data;\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}