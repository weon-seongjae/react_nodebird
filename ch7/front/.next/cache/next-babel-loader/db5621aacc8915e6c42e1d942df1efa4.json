{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga'; // 서버사이드 렌더링에 필수요소\n\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport axios from 'axios';\nimport Helmet from 'react-helmet';\nimport { Container } from 'next/app';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport Home from './index';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nvar NodeBird = function NodeBird(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  return (// hashtag의 component의 props로 넣어줌.\n    React.createElement(Container, null, React.createElement(Provider, {\n      store: store\n    }, React.createElement(Helmet, {\n      title: \"NodeBird\",\n      htmlAttributes: {\n        lang: 'ko'\n      },\n      meta: [{\n        charset: 'UTF-8'\n      }, {\n        name: 'viewport',\n        content: 'width=device-width, initial-scale=1.0. minimum-scale=1.0, maximum-scale=1.0, user-scalable=yes,viewport-fit=cover'\n      }, {\n        'http-equiv': 'X-UA-Compatible',\n        content: 'IE=edge'\n      }, {\n        name: 'description',\n        content: 'weonsj의 NodeBird SNS'\n      }, {\n        name: 'og:title',\n        content: 'NodeBird'\n      }, {\n        name: 'og:description',\n        content: 'weonsj의 NodeBird SNS'\n      }, {\n        property: 'og:type',\n        content: 'website'\n      }],\n      link: [{\n        rel: 'stylesheet',\n        href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css'\n      }, {\n        rel: 'stylesheet',\n        href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css'\n      }, {\n        rel: 'stylesheet',\n        href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css'\n      }],\n      script: [{\n        src: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js'\n      }]\n    }), React.createElement(AppLayout, null, React.createElement(Component, pageProps))))\n  );\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n}; // const middleware = (store) => (next) => (action) => {\n//   next(action);\n// };\n//= =====middleware만드는 방법 : currying - 인자 하나를 받아 다른 함수를 리턴\n// ==================next에서 getInitialProps 실행. context도 같이 넣어줌. 이것에 각 Component에서 실행됨.===============\n\nNodeBird.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var ctx, Component, pageProps, state, cookie;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = context.ctx, Component = context.Component;\n            pageProps = {};\n            state = ctx.store.getState(); // user 정보 가져옴, user 정보도 서버사이드 렌더링 구현됨\n\n            cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // 쿠키가 위치하는 곳\n\n            console.log(cookie); // 클라이언트 환경에서는 브라우저가 쿠키를 넣어주는데, 서버일 경우에는 직접 넣어야 한다.\n\n            axios.defaults.headers.Cookie = '';\n\n            if (ctx.isServer) {\n              axios.defaults.headers.Cookie = cookie; // 직접 쿠키를 넣어줌.\n            }\n\n            if (!state.user.me) {\n              ctx.store.dispatch({\n                type: LOAD_USER_REQUEST\n              });\n            }\n\n            if (!Component.getInitialProps) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 11;\n            return Component.getInitialProps(ctx);\n\n          case 11:\n            pageProps = _context.sent;\n\n          case 12:\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // =================================================================================\n\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, function (store) {\n    return function (next) {\n      return function (action) {\n        console.log(action);\n        next(action);\n      };\n    };\n  }];\n  var enhancer = process.env.NODE_ENV === 'production' // 실제 서비스\n  ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 서버사이드 렌더링할 때 store.sagaTask를 변수로 설정. withReduxSaga가 내부에서 필요로 함\n\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird)); // 레이아웃은 _app.js에서 코딩을 한다.","map":{"version":3,"sources":["C:\\react-git\\ch7\\front\\pages\\_app.js"],"names":["React","PropTypes","withRedux","withReduxSaga","applyMiddleware","compose","createStore","Provider","createSagaMiddleware","axios","Helmet","Container","AppLayout","reducer","rootSaga","Home","LOAD_USER_REQUEST","NodeBird","Component","store","pageProps","lang","charset","name","content","property","rel","href","src","propTypes","elementType","isRequired","object","getInitialProps","context","ctx","state","getState","cookie","isServer","req","headers","console","log","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","next","action","enhancer","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga'; // 서버사이드 렌더링에 필수요소\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport axios from 'axios';\nimport Helmet from 'react-helmet';\nimport { Container } from 'next/app';\n\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport Home from './index';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nconst NodeBird = ({ Component, store, pageProps }) => ( // hashtag의 component의 props로 넣어줌.\n  <Container>\n    <Provider store={store}>\n      <Helmet\n        title=\"NodeBird\"\n        htmlAttributes={{ lang: 'ko' }}\n        meta={[{\n          charset: 'UTF-8',\n        }, {\n          name: 'viewport', content: 'width=device-width, initial-scale=1.0. minimum-scale=1.0, maximum-scale=1.0, user-scalable=yes,viewport-fit=cover',\n        }, {\n          'http-equiv': 'X-UA-Compatible', content: 'IE=edge',\n        }, {\n          name: 'description', content: 'weonsj의 NodeBird SNS',\n        }, {\n          name: 'og:title', content: 'NodeBird',\n        }, {\n          name: 'og:description', content: 'weonsj의 NodeBird SNS',\n        }, {\n          property: 'og:type', content: 'website',\n        }]}\n        link={[{\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css',\n        }, {\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css',\n        }, {\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css',\n        }]}\n        script={[{\n          src: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js',\n        }]}\n      />\n      <AppLayout>\n        <Component {...pageProps} />\n      </AppLayout>\n    </Provider>\n  </Container>\n);\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired,\n};\n\n// const middleware = (store) => (next) => (action) => {\n//   next(action);\n// };\n//= =====middleware만드는 방법 : currying - 인자 하나를 받아 다른 함수를 리턴\n\n// ==================next에서 getInitialProps 실행. context도 같이 넣어줌. 이것에 각 Component에서 실행됨.===============\nNodeBird.getInitialProps = async (context) => {\n  const { ctx, Component } = context;\n  let pageProps = {};\n  const state = ctx.store.getState(); // user 정보 가져옴, user 정보도 서버사이드 렌더링 구현됨\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // 쿠키가 위치하는 곳\n  console.log(cookie); // 클라이언트 환경에서는 브라우저가 쿠키를 넣어주는데, 서버일 경우에는 직접 넣어야 한다.\n  axios.defaults.headers.Cookie = '';\n  if (ctx.isServer) {\n    axios.defaults.headers.Cookie = cookie; // 직접 쿠키를 넣어줌.\n  }\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST,\n    });\n  }\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx); // hashtag.js에서 리턴한 값이 pageProps에 담김. pageProps는 위의 NodeBird의 pageProps로 넘김, index.js의 Home.getInitialProps = async (context)가 됨. 게시글 먼저 가져오는 경우\n  }\n  return { pageProps }; // component의 props\n};\n// =================================================================================\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, (store) => (next) => (action) => {\n    console.log(action);\n    next(action);\n  }];\n  const enhancer = process.env.NODE_ENV === 'production' // 실제 서비스\n    ? compose(applyMiddleware(...middlewares))\n    : compose(\n      applyMiddleware(...middlewares),\n      !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    );\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 서버사이드 렌더링할 때 store.sagaTask를 변수로 설정. withReduxSaga가 내부에서 필요로 함\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));\n\n// 레이아웃은 _app.js에서 코딩을 한다.\n"]},"metadata":{},"sourceType":"module"}