{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga'; //서버사이드 렌더링에 필수요소\n\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport Home from \"./index\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\n\nvar NodeBird = function NodeBird(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  return (// hashtag의 component의 props로 넣어줌.\n    React.createElement(Provider, {\n      store: store\n    }, React.createElement(Head, null, React.createElement(\"title\", null, \"NodeBird\"), React.createElement(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\n    }), React.createElement(\"script\", {\n      src: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js\"\n    }), React.createElement(\"link\", {\n      rel: \"stylesheet\",\n      type: \"text/css\",\n      charset: \"UTF-8\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n    }), React.createElement(\"link\", {\n      rel: \"stylesheet\",\n      type: \"text/css\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n    })), React.createElement(AppLayout, null, React.createElement(Component, pageProps)))\n  );\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n}; // const middleware = (store) => (next) => (action) => {\n//   next(action);\n// };\n//= =====middleware만드는 방법 : currying - 인자 하나를 받아 다른 함수를 리턴\n// ==================next에서 getInitialProps 실행. context도 같이 넣어줌. 이것에 각 Component에서 실행됨.===============\n\nNodeBird.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var ctx, Component, pageProps, state;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(context);\n            ctx = context.ctx, Component = context.Component;\n            pageProps = {};\n            state = ctx.store.getState(); // user 정보 가져옴, user 정보도 서버사이드 렌더링 구현됨\n\n            if (!state.user.me) {\n              _context.next = 10;\n              break;\n            }\n\n            ctx.store.dispatch({\n              type: LOAD_USER_REQUEST\n            });\n\n            if (!Component.getInitialProps) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return Component.getInitialProps(ctx);\n\n          case 9:\n            pageProps = _context.sent;\n\n          case 10:\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // =================================================================================\n\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = process.env.NODE_ENV === 'production' // 실제 서비스\n  ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 서버사이드 렌더링할 때 store.sagaTask를 변수로 설정. withReduxSaga가 내부에서 필요로 함\n\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird)); // 레이아웃은 _app.js에서 코딩을 한다.","map":{"version":3,"sources":["C:\\react-nodebird\\ch7\\front\\pages\\_app.js"],"names":["React","Head","PropTypes","withRedux","withReduxSaga","applyMiddleware","compose","createStore","Provider","createSagaMiddleware","AppLayout","reducer","rootSaga","Home","LOAD_USER_REQUEST","NodeBird","Component","store","pageProps","propTypes","elementType","isRequired","object","getInitialProps","context","console","log","ctx","state","getState","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","process","env","NODE_ENV","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CAA6C;;AAC7C,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAAQC,iBAAR,QAAgC,kBAAhC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAGC,SAAH,QAAGA,SAAH;AAAA,MAAcC,KAAd,QAAcA,KAAd;AAAA,MAAqBC,SAArB,QAAqBA,SAArB;AAAA,SAAuC;AACtD,wBAAC,QAAD;AAAU,MAAA,KAAK,EAAED;AAAjB,OACE,oBAAC,IAAD,QACE,8CADF,EAEE;AAAM,MAAA,GAAG,EAAC,YAAV;AAAuB,MAAA,IAAI,EAAC;AAA5B,MAFF,EAGE;AAAQ,MAAA,GAAG,EAAC;AAAZ,MAHF,EAIE;AAAM,MAAA,GAAG,EAAC,YAAV;AAAuB,MAAA,IAAI,EAAC,UAA5B;AAAuC,MAAA,OAAO,EAAC,OAA/C;AAAuD,MAAA,IAAI,EAAC;AAA5D,MAJF,EAKE;AAAM,MAAA,GAAG,EAAC,YAAV;AAAuB,MAAA,IAAI,EAAC,UAA5B;AAAuC,MAAA,IAAI,EAAC;AAA5C,MALF,CADF,EAQE,oBAAC,SAAD,QACE,oBAAC,SAAD,EAAeC,SAAf,CADF,CARF;AADe;AAAA,CAAjB;;AAeAH,QAAQ,CAACI,SAAT,GAAqB;AACnBH,EAAAA,SAAS,EAAEd,SAAS,CAACkB,WAAV,CAAsBC,UADd;AAEnBJ,EAAAA,KAAK,EAAEf,SAAS,CAACoB,MAAV,CAAiBD,UAFL;AAGnBH,EAAAA,SAAS,EAAEhB,SAAS,CAACoB,MAAV,CAAiBD;AAHT,CAArB,C,CAMA;AACA;AACA;AACA;AAEA;;AACAN,QAAQ,CAACQ,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA2B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACQG,YAAAA,GAFiB,GAEEH,OAFF,CAEjBG,GAFiB,EAEZX,SAFY,GAEEQ,OAFF,CAEZR,SAFY;AAGrBE,YAAAA,SAHqB,GAGT,EAHS;AAInBU,YAAAA,KAJmB,GAIXD,GAAG,CAACV,KAAJ,CAAUY,QAAV,EAJW,EAIW;;AAJX,iBAKrBD,KAAK,CAACE,IAAN,CAAWC,EALU;AAAA;AAAA;AAAA;;AAMvBJ,YAAAA,GAAG,CAACV,KAAJ,CAAUe,QAAV,CAAmB;AACjBC,cAAAA,IAAI,EAAEnB;AADW,aAAnB;;AANuB,iBASrBE,SAAS,CAACO,eATW;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAULP,SAAS,CAACO,eAAV,CAA0BI,GAA1B,CAVK;;AAAA;AAUvBT,YAAAA,SAVuB;;AAAA;AAAA,6CAalB;AAAEA,cAAAA,SAAS,EAATA;AAAF,aAbkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA,I,CAeA;;;AAEA,IAAMgB,cAAc,GAAG,SAAjBA,cAAiB,CAACC,YAAD,EAAeC,OAAf,EAA2B;AAChD,MAAMC,cAAc,GAAG5B,oBAAoB,EAA3C;AACA,MAAM6B,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,CAAsC;AAAtC,IACbpC,OAAO,CAACD,eAAe,MAAf,SAAmBiC,WAAnB,CAAD,CADM,GAEbhC,OAAO,CACPD,eAAe,MAAf,SAAmBiC,WAAnB,CADO,EAEP,CAACF,OAAO,CAACO,QAAT,IAAqB,OAAOC,MAAM,CAACC,4BAAd,KAA+C,WAApE,GAAkFD,MAAM,CAACC,4BAAP,EAAlF,GAA0H,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAFpH,CAFX;AAMA,MAAM7B,KAAK,GAAGV,WAAW,CAACI,OAAD,EAAUwB,YAAV,EAAwBI,QAAxB,CAAzB;AACAtB,EAAAA,KAAK,CAAC8B,QAAN,GAAiBV,cAAc,CAACW,GAAf,CAAmBpC,QAAnB,CAAjB,CAVgD,CAUD;;AAC/C,SAAOK,KAAP;AACD,CAZD;;AAcA,eAAed,SAAS,CAAC+B,cAAD,CAAT,CAA0B9B,aAAa,CAACW,QAAD,CAAvC,CAAf,C,CAEA","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga'; //서버사이드 렌더링에 필수요소\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport Home from \"./index\";\nimport {LOAD_USER_REQUEST} from \"../reducers/user\";\n\nconst NodeBird = ({ Component, store, pageProps }) => ( // hashtag의 component의 props로 넣어줌.\n  <Provider store={store}>\n    <Head>\n      <title>NodeBird</title>\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\" />\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js\" />\n      <link rel=\"stylesheet\" type=\"text/css\" charset=\"UTF-8\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\n    </Head>\n    <AppLayout>\n      <Component {...pageProps} />\n    </AppLayout>\n  </Provider>\n);\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired,\n};\n\n// const middleware = (store) => (next) => (action) => {\n//   next(action);\n// };\n//= =====middleware만드는 방법 : currying - 인자 하나를 받아 다른 함수를 리턴\n\n// ==================next에서 getInitialProps 실행. context도 같이 넣어줌. 이것에 각 Component에서 실행됨.===============\nNodeBird.getInitialProps = async (context) => {\n  console.log(context);\n  const { ctx, Component } = context;\n  let pageProps = {};\n  const state = ctx.store.getState(); // user 정보 가져옴, user 정보도 서버사이드 렌더링 구현됨\n  if (state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST,\n    });\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx); // hashtag.js에서 리턴한 값이 pageProps에 담김. pageProps는 위의 NodeBird의 pageProps로 넘김, index.js의 Home.getInitialProps = async (context)가 됨. 게시글 먼저 가져오는 경우\n  }\n  }\n  return { pageProps }; // component의 props\n};\n// =================================================================================\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = process.env.NODE_ENV === 'production' // 실제 서비스\n    ? compose(applyMiddleware(...middlewares))\n    : compose(\n      applyMiddleware(...middlewares),\n      !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    );\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 서버사이드 렌더링할 때 store.sagaTask를 변수로 설정. withReduxSaga가 내부에서 필요로 함\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));\n\n// 레이아웃은 _app.js에서 코딩을 한다.\n"]},"metadata":{},"sourceType":"module"}