{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nexport var initialState = {\n  mainPosts: [],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: '',\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false\n};\nexport var LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport var LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport var LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport var LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport var LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPLOAD_IMAGES_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          imagePaths: [].concat(_toConsumableArray(state.imagePaths), _toConsumableArray(action.data)) // 이미지 미리보기 할 수 있는 경로들\n\n        });\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_IMAGE:\n      {\n        // 동기 작업으로 이것 하나만 필요하다.\n        return _objectSpread({}, state, {\n          imagePaths: state.imagePaths.filter(function (v, i) {\n            return i !== action.index;\n          })\n        });\n      }\n\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts)),\n          postAdded: true,\n          imagePaths: []\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        }); // action: comment에 대한 action\n\n        var post = state.mainPosts[postIndex];\n        var Comments = [].concat(_toConsumableArray(post.Comments), [action.data.comment]);\n\n        var mainPosts = _toConsumableArray(state.mainPosts);\n\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments: Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts: mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    case LOAD_COMMENTS_SUCCESS:\n      {\n        var _postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var _post = state.mainPosts[_postIndex];\n        var _Comments = action.data.comments;\n\n        var _mainPosts = _toConsumableArray(state.mainPosts);\n\n        _mainPosts[_postIndex] = _objectSpread({}, _post, {\n          Comments: _Comments\n        });\n        return _objectSpread({}, state, {\n          mainPosts: _mainPosts\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: []\n        });\n      }\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.concat(action.data) // 지난 게시글에 추가\n\n        });\n      }\n\n    case LOAD_MAIN_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_SUCCESS:\n      {\n        var _postIndex2 = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var _post2 = state.mainPosts[_postIndex2];\n        var Likers = [{\n          id: action.data.userId\n        }].concat(_toConsumableArray(_post2.Likers));\n\n        var _mainPosts2 = _toConsumableArray(state.mainPosts);\n\n        _mainPosts2[_postIndex2] = _objectSpread({}, _post2, {\n          Likers: Likers\n        });\n        return _objectSpread({}, state, {\n          mainPosts: _mainPosts2\n        });\n      }\n\n    case LIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        var _postIndex3 = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var _post3 = state.mainPosts[_postIndex3];\n\n        var _Likers = _post3.Likers.filter(function (v) {\n          return v.id !== action.data.userId;\n        });\n\n        var _mainPosts3 = _toConsumableArray(state.mainPosts);\n\n        _mainPosts3[_postIndex3] = _objectSpread({}, _post3, {\n          Likers: _Likers\n        });\n        return _objectSpread({}, state, {\n          mainPosts: _mainPosts3\n        });\n      }\n\n    case UNLIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case RETWEET_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case RETWEET_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts))\n        });\n      }\n\n    case RETWEET_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.filter(function (v) {\n            return v.id !== action.data;\n          })\n        });\n      }\n\n    case REMOVE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["C:\\react-nodebird\\ch7\\front\\reducers\\post.js"],"names":["initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","state","action","type","data","filter","v","i","index","error","postIndex","findIndex","id","postId","post","Comments","comment","comments","concat","Likers","userId"],"mappings":"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","sourcesContent":["export const initialState = {\r\n  mainPosts: [], // 화면에 보일 포스트들\r\n  imagePaths: [], // 미리보기 이미지 경로\r\n  addPostErrorReason: '', // 포스트 업로드 실패 사유\r\n  isAddingPost: false, // 포스트 업로드 중\r\n  postAdded: false, // 포스트 업로드 성공\r\n  isAddingComment: false,\r\n  addCommentErrorReason: '',\r\n  commentAdded: false,\r\n};\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPLOAD_IMAGES_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case UPLOAD_IMAGES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        imagePaths: [...state.imagePaths, ...action.data], // 이미지 미리보기 할 수 있는 경로들\r\n      };\r\n    }\r\n    case UPLOAD_IMAGES_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case REMOVE_IMAGE: { // 동기 작업으로 이것 하나만 필요하다.\r\n      return {\r\n        ...state,\r\n        imagePaths: state.imagePaths.filter((v, i) => i !== action.index),\r\n      };\r\n    }\r\n    case ADD_POST_REQUEST: {\r\n      return {\r\n        ...state,\r\n        isAddingPost: true,\r\n        addPostErrorReason: '',\r\n        postAdded: false,\r\n      };\r\n    }\r\n    case ADD_POST_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAddingPost: false,\r\n        mainPosts: [action.data, ...state.mainPosts],\r\n        postAdded: true,\r\n        imagePaths: [],\r\n      };\r\n    }\r\n    case ADD_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n        isAddingPost: false,\r\n        addPostErrorReason: action.error,\r\n      };\r\n    }\r\n    case ADD_COMMENT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        isAddingComment: true,\r\n        addCommentErrorReason: '',\r\n        commentAdded: false,\r\n      };\r\n    }\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId); // action: comment에 대한 action\r\n      const post = state.mainPosts[postIndex];\r\n      const Comments = [...post.Comments, action.data.comment];\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = { ...post, Comments };\r\n      return {\r\n        ...state,\r\n        isAddingComment: false,\r\n        mainPosts,\r\n        commentAdded: true,\r\n      };\r\n    }\r\n    case ADD_COMMENT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        isAddingComment: false,\r\n        addCommentErrorReason: action.error,\r\n      };\r\n    }\r\n    case LOAD_COMMENTS_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n      const post = state.mainPosts[postIndex];\r\n      const Comments = action.data.comments;\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = { ...post, Comments };\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n      };\r\n    }\r\n    case LOAD_MAIN_POSTS_REQUEST:\r\n    case LOAD_HASHTAG_POSTS_REQUEST:\r\n    case LOAD_USER_POSTS_REQUEST: {\r\n      return {\r\n        ...state,\r\n        mainPosts: [],\r\n      };\r\n    }\r\n    case LOAD_MAIN_POSTS_SUCCESS:\r\n    case LOAD_HASHTAG_POSTS_SUCCESS:\r\n    case LOAD_USER_POSTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        mainPosts: state.mainPosts.concat(action.data), // 지난 게시글에 추가\r\n      };\r\n    }\r\n    case LOAD_MAIN_POSTS_FAILURE:\r\n    case LOAD_HASHTAG_POSTS_FAILURE:\r\n    case LOAD_USER_POSTS_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case LIKE_POST_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case LIKE_POST_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n      const post = state.mainPosts[postIndex];\r\n      const Likers = [{ id: action.data.userId }, ...post.Likers];\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = { ...post, Likers };\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n      };\r\n    }\r\n    case LIKE_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case UNLIKE_POST_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n      const post = state.mainPosts[postIndex];\r\n      const Likers = post.Likers.filter(v => v.id !== action.data.userId);\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = { ...post, Likers };\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n      };\r\n    }\r\n    case UNLIKE_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case RETWEET_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case RETWEET_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        mainPosts: [action.data, ...state.mainPosts],\r\n      };\r\n    }\r\n    case RETWEET_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case REMOVE_POST_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case REMOVE_POST_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        mainPosts: state.mainPosts.filter(v => v.id !== action.data),\r\n      };\r\n    }\r\n    case REMOVE_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    default: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}