{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar next = _interopRequireWildcard(require(\"./\"));\n\nvar _eventSourcePolyfill = _interopRequireDefault(require(\"./dev/event-source-polyfill\"));\n\nvar _onDemandEntriesClient = _interopRequireDefault(require(\"./dev/on-demand-entries-client\"));\n\nvar _webpackHotMiddlewareClient = _interopRequireDefault(require(\"./dev/webpack-hot-middleware-client\"));\n\nvar _devBuildWatcher = _interopRequireDefault(require(\"./dev/dev-build-watcher\"));\n\nvar _prerenderIndicator = _interopRequireDefault(require(\"./dev/prerender-indicator\")); // Temporary workaround for the issue described here:\n// https://github.com/zeit/next.js/issues/3775#issuecomment-407438123\n// The runtimeChunk doesn't have dynamic import handling code when there hasn't been a dynamic import\n// The runtimeChunk can't hot reload itself currently to correct it when adding pages using on-demand-entries\n\n\nimport('./dev/noop'); // Support EventSource on Internet Explorer 11\n\nif (!window.EventSource) {\n  window.EventSource = _eventSourcePolyfill.default;\n}\n\nvar _window = window,\n    assetPrefix = _window.__NEXT_DATA__.assetPrefix;\nvar prefix = assetPrefix || '';\nvar webpackHMR = (0, _webpackHotMiddlewareClient.default)({\n  assetPrefix: prefix\n});\nwindow.next = next;\n(0, next.default)({\n  webpackHMR: webpackHMR\n}).then(function (emitter) {\n  (0, _onDemandEntriesClient.default)({\n    assetPrefix: prefix\n  });\n  (0, _devBuildWatcher.default)();\n  (0, _prerenderIndicator.default)();\n  var lastScroll;\n  emitter.on('before-reactdom-render', function (_ref) {\n    var Component = _ref.Component,\n        ErrorComponent = _ref.ErrorComponent; // Remember scroll when ErrorComponent is being rendered to later restore it\n\n    if (!lastScroll && Component === ErrorComponent) {\n      var _window2 = window,\n          pageXOffset = _window2.pageXOffset,\n          pageYOffset = _window2.pageYOffset;\n      lastScroll = {\n        x: pageXOffset,\n        y: pageYOffset\n      };\n    }\n  });\n  emitter.on('after-reactdom-render', function (_ref2) {\n    var Component = _ref2.Component,\n        ErrorComponent = _ref2.ErrorComponent;\n\n    if (lastScroll && Component !== ErrorComponent) {\n      // Restore scroll after ErrorComponent was replaced with a page component by HMR\n      var _lastScroll = lastScroll,\n          x = _lastScroll.x,\n          y = _lastScroll.y;\n      window.scroll(x, y);\n      lastScroll = null;\n    }\n  });\n}).catch(function (err) {\n  console.error('Error was not caught', err);\n});","map":null,"metadata":{},"sourceType":"script"}