{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List, Popover } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LIKE_POST_REQUEST, LOAD_COMMENTS_REQUEST, RETWEET_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\nimport PostCardContent from \"./PostCardContent\";\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentText = _useState4[0],\n      setCommentText = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    }); // 펼쳐져 있으면 닫고, 닫혀져 있으면 펼침\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    if (liked) {\n      // 좋아요를 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 누르지 않은 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]); // 리트윗 만들기 =============================\n\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]); // =========================================\n\n  return React.createElement(\"div\", null, React.createElement(Card, {\n    key: +post.createdAt,\n    cover: post.Images && post.Images[0] && React.createElement(PostImages, {\n      images: post.Images\n    }) // 커버라는 속성으로 이미지를 가져올 수 있음\n    ,\n    actions: [React.createElement(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), React.createElement(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), React.createElement(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), React.createElement(Popover, {\n      key: \"ellipsis\",\n      content: React.createElement(Button.Group, null, me && post.UserId === me.id ? React.createElement(React.Fragment, null, React.createElement(Button, null, \"\\uC218\\uC815\"), React.createElement(Button, {\n        type: \"danger\"\n      }, \"\\uC0AD\\uC81C\")) : React.createElement(Button, null, \"\\uC2E0\\uACE0\"))\n    }, React.createElement(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: React.createElement(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? // 리트윗을 한 경우\n  React.createElement(Card, {\n    cover: post.Retweet.Images[0] && React.createElement(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, React.createElement(Card.Meta, {\n    avatar: React.createElement(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: \"/user/\".concat(post.Retweet.User.id)\n    }, React.createElement(\"a\", null, React.createElement(Avatar, null, post.Retweet.User.nickname[0]))) // 게시글의 avatar\n    ,\n    title: post.Retweet.User.nickname,\n    description: React.createElement(PostCardContent, {\n      postData: post.Retweet.content\n    }) // 게시글 컨텐트. a 태그로 바꾸는 게 아니라 next의 Link태그로 바꿔야 함.\n\n  })) : // 리트윗을 하지 않은 경우\n  React.createElement(Card, {\n    Meta: true,\n    avatar: React.createElement(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, React.createElement(\"a\", null, React.createElement(Avatar, null, post.User.nickname[0]))) // 게시글의 avatar\n    ,\n    title: post.User.nickname,\n    description: React.createElement(PostCardContent, {\n      postData: post.content\n    }) // 게시글 컨텐트. a 태그로 바꾸는 게 아니라 next의 Link태그로 바꿔야 함.\n\n  })), commentFormOpened && React.createElement(React.Fragment, null, React.createElement(Form, {\n    onSubmit: onSubmitComment\n  }, React.createElement(Form.Item, null, React.createElement(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), React.createElement(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return React.createElement(\"li\", null, React.createElement(Comment, {\n        author: item.User.nickname,\n        avatar: React.createElement(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, React.createElement(\"a\", null, React.createElement(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:\\react-nodebird\\ch6\\front\\components\\PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Icon","Input","List","Popover","Link","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","LIKE_POST_REQUEST","LOAD_COMMENTS_REQUEST","RETWEET_REQUEST","UNLIKE_POST_REQUEST","PostImages","PostCardContent","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","createdAt","Images","UserId","RetweetId","User","nickname","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List, Popover } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  ADD_COMMENT_REQUEST,\n  LIKE_POST_REQUEST,\n  LOAD_COMMENTS_REQUEST,\n  RETWEET_REQUEST,\n  UNLIKE_POST_REQUEST\n} from '../reducers/post';\nimport PostImages from './PostImages';\nimport PostCardContent from \"./PostCardContent\";\n\nconst PostCard = ({ post }) => {\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const [commentText, setCommentText] = useState('');\n  const { me } = useSelector(state => state.user);\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev); // 펼쳐져 있으면 닫고, 닫혀져 있으면 펼침\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id,\n      });\n    }\n  }, []);\n\n  const onSubmitComment = useCallback((e) => {\n    e.preventDefault();\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText,\n      },\n    });\n  }, [me && me.id, commentText]);\n\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n\n  const onChangeCommentText = useCallback((e) => {\n    setCommentText(e.target.value);\n  }, []);\n\n  const onToggleLike = useCallback(() => {\n    if(!me) {\n      return alert('로그인이 필요합니다.');\n    }\n    if (liked) { // 좋아요를 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id,\n      })\n    } else { // 좋아요 누르지 않은 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id,\n      });\n    }\n  },[me && me.id, post && post.id, liked]);\n\n  // 리트윗 만들기 =============================\n  const onRetweet = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch ({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    });\n  },[me && me.id, post && post.id])\n  // =========================================\n\n  return (\n    <div>\n      <Card\n        key={+post.createdAt}\n        cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n        // 커버라는 속성으로 이미지를 가져올 수 있음\n        actions={[\n          <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\n          <Icon\n            type=\"heart\"\n            key=\"heart\"\n            theme={liked ? 'twoTone' : 'outlined'}\n            twoToneColor='#eb2f96'\n            onClick={onToggleLike}\n          />,\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n          <Popover\n            key='ellipsis'\n            content={(\n              <Button.Group>\n                {me && post.UserId === me.id\n                ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button type='danger'>삭제</Button>\n                  </>\n                  )\n                  : <Button>신고</Button>}\n              </Button.Group>\n            )}\n          >\n            <Icon type='ellipsis' />\n          </Popover>,\n        ]}\n        title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\n        extra={<Button>팔로우</Button>}\n      >\n        {post.RetweetId && post.Retweet\n          ? (\n          // 리트윗을 한 경우\n          <Card\n            cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\n          >\n            <Card.Meta\n              avatar={(\n                <Link\n                  href={{ pathname: '/user', query: { id: post.Retweet.User.id } }}\n                  as={`/user/${post.Retweet.User.id}`}\n                >\n                  <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\n                </Link>\n              )} // 게시글의 avatar\n              title={post.Retweet.User.nickname}\n              description={<PostCardContent postData={post.Retweet.content} />} // 게시글 컨텐트. a 태그로 바꾸는 게 아니라 next의 Link태그로 바꿔야 함.\n            />\n          </Card>\n          )\n          : ( // 리트윗을 하지 않은 경우\n            <Card Meta\n              avatar={(\n                <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\n                  <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>\n              )} // 게시글의 avatar\n              title={post.User.nickname}\n              description={<PostCardContent postData={post.content} />} // 게시글 컨텐트. a 태그로 바꾸는 게 아니라 next의 Link태그로 바꿔야 함.\n            />\n              )}\n            </Card>\n      {commentFormOpened && (\n        <>\n          <Form onSubmit={onSubmitComment}>\n            <Form.Item>\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n            </Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\n          </Form>\n          <List\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments || []}\n            renderItem={item => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={(\n                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                      <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                    </Link>\n                    )}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object,\n  }),\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}