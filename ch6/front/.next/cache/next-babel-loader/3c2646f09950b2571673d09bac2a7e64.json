{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logIn),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogIn),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logOut),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogOut),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\nimport { UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\"; // call은 동기 호출(순서를 지켜서 실행하는 경우), fork는 비동기 호출\n// call은 서버에 요청한 후 응답이 다 받아질 때까지 기다림\n// fork는 서버에 요청한 후 응답유무에 관계없이 실행\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', loginData, {\n    withCredentials: true // 프론트와 서버간에 쿠키를 주고받을 수 있음\n\n  });\n}\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put은 dispatch와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            // put은 dispatch와 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction logOutAPI() {\n  // 로그아웃 할 때는 데이터가 필요없다.\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    // (주소, 데이터 , 설정) 두번째 인자는 데이터인데 빈 값이라도 넣어야 한다.\n    withCredentials: true // 서버의 app.use(cors)에서 쿠키를 받는다.\n\n  });\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context5.next = 12;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context5.t0);\n          _context5.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? \"/user/\".concat(userId) : '/user/', {\n    // get은 데이터가 없기 때문에 두번째가 바로 설정이 된다.\n    withCredentials: true // 서버의 app.use(cors)에서 쿠키를 받는다.\n\n  });\n}\n\nfunction loadUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            // put은 dispatch 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n            me: !action.data // action.data = userId(남의 정보)가 없는 경우 내 정보 불러옴\n\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_USER_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp), fork(watchLogOut), fork(watchLoadUser)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:\\react-nodebird\\ch6\\front\\sagas\\user.js"],"names":["logIn","watchLogIn","signUp","watchSignUp","logOut","watchLogOut","loadUser","watchLoadUser","userSaga","all","call","fork","put","takeEvery","axios","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","logInAPI","loginData","post","withCredentials","action","data","result","type","console","error","signUpAPI","signUpData","logOutAPI","loadUserAPI","userId","get","me"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  LOAD_USER_FAILURE,\n  LOAD_USER_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n} from '../reducers/user';\nimport {UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS} from \"../reducers/post\";\n\n// call은 동기 호출(순서를 지켜서 실행하는 경우), fork는 비동기 호출\n// call은 서버에 요청한 후 응답이 다 받아질 때까지 기다림\n// fork는 서버에 요청한 후 응답유무에 관계없이 실행\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', loginData, {\n    withCredentials: true, // 프론트와 서버간에 쿠키를 주고받을 수 있음\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    // yield fork(logger); //logger는 내 기록을 로깅하는 함수, 10초 걸림\n    // yield call(loginAPI);\n    yield put({ // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield fork(logger); //logger는 내 기록을 로깅하는 함수, 10초 걸림\n    yield call(signUpAPI, action.data);\n    yield put({ // put은 dispatch와 동일\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() { // 로그아웃 할 때는 데이터가 필요없다.\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, { // (주소, 데이터 , 설정) 두번째 인자는 데이터인데 빈 값이라도 넣어야 한다.\n    withCredentials: true, // 서버의 app.use(cors)에서 쿠키를 받는다.\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({ // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', { // get은 데이터가 없기 때문에 두번째가 바로 설정이 된다.\n    withCredentials: true, // 서버의 app.use(cors)에서 쿠키를 받는다.\n  });\n}\n\nfunction* loadUser(action) { // 남의 정보도 불러올 수 있게 수정을 해줘야 함.\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data, // action.data = userId(남의 정보)가 없는 경우 내 정보 불러옴\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchLoadUser),\n    fork(watchSignUp),\n    fork(watchLogOut),\n    fork(watchLoadUser),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}